
Lab3_IDE_Board2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f6c  08003f6c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003f6c  08003f6c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f6c  08003f6c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f6c  08003f6c  00013f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000068  08003fdc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08003fdc  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d788  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e8a  00000000  00000000  0002d85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  0002f6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a8e  00000000  00000000  00030470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018aed  00000000  00000000  00030efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de67  00000000  00000000  000499eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e7d4  00000000  00000000  00057852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040d4  00000000  00000000  000e6028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000ea0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ee4 	.word	0x08003ee4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003ee4 	.word	0x08003ee4

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f002 fda7 	bl	8002cb0 <HAL_UART_Transmit>
  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000f4 	.word	0x200000f4

08000170 <calc_SAE_J1850>:

uint8_t calc_SAE_J1850(uint8_t data[], int Crc_len)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
  uint8_t crc, idx, idy, temp1, temp2;
  crc = 0;
 800017a:	2300      	movs	r3, #0
 800017c:	73fb      	strb	r3, [r7, #15]
  idx = 0;
 800017e:	2300      	movs	r3, #0
 8000180:	73bb      	strb	r3, [r7, #14]
  idy = 0;
 8000182:	2300      	movs	r3, #0
 8000184:	737b      	strb	r3, [r7, #13]
  temp1 = 0;
 8000186:	2300      	movs	r3, #0
 8000188:	733b      	strb	r3, [r7, #12]
  temp2 = 0;
 800018a:	2300      	movs	r3, #0
 800018c:	72fb      	strb	r3, [r7, #11]
  for (idx = 0; idx < Crc_len + 1; idx++)
 800018e:	2300      	movs	r3, #0
 8000190:	73bb      	strb	r3, [r7, #14]
 8000192:	e02a      	b.n	80001ea <calc_SAE_J1850+0x7a>
  {
    if (idx == 0){
 8000194:	7bbb      	ldrb	r3, [r7, #14]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d102      	bne.n	80001a0 <calc_SAE_J1850+0x30>
      temp1 = 0;
 800019a:	2300      	movs	r3, #0
 800019c:	733b      	strb	r3, [r7, #12]
 800019e:	e007      	b.n	80001b0 <calc_SAE_J1850+0x40>
    }else{
      temp1 = data[Crc_len - idx];
 80001a0:	7bbb      	ldrb	r3, [r7, #14]
 80001a2:	683a      	ldr	r2, [r7, #0]
 80001a4:	1ad3      	subs	r3, r2, r3
 80001a6:	461a      	mov	r2, r3
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	4413      	add	r3, r2
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	733b      	strb	r3, [r7, #12]
    }
    crc = crc ^ temp1;
 80001b0:	7bfa      	ldrb	r2, [r7, #15]
 80001b2:	7b3b      	ldrb	r3, [r7, #12]
 80001b4:	4053      	eors	r3, r2
 80001b6:	73fb      	strb	r3, [r7, #15]
    for (idy = 8; idy > 0; idy--)
 80001b8:	2308      	movs	r3, #8
 80001ba:	737b      	strb	r3, [r7, #13]
 80001bc:	e00f      	b.n	80001de <calc_SAE_J1850+0x6e>
    {
      temp2 = crc;
 80001be:	7bfb      	ldrb	r3, [r7, #15]
 80001c0:	72fb      	strb	r3, [r7, #11]
      crc <<= 1;
 80001c2:	7bfb      	ldrb	r3, [r7, #15]
 80001c4:	005b      	lsls	r3, r3, #1
 80001c6:	73fb      	strb	r3, [r7, #15]
      if (0 != (temp2 & 128))
 80001c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	da03      	bge.n	80001d8 <calc_SAE_J1850+0x68>
      {
        crc = crc ^ 0x1D;
 80001d0:	7bfb      	ldrb	r3, [r7, #15]
 80001d2:	f083 031d 	eor.w	r3, r3, #29
 80001d6:	73fb      	strb	r3, [r7, #15]
    for (idy = 8; idy > 0; idy--)
 80001d8:	7b7b      	ldrb	r3, [r7, #13]
 80001da:	3b01      	subs	r3, #1
 80001dc:	737b      	strb	r3, [r7, #13]
 80001de:	7b7b      	ldrb	r3, [r7, #13]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d1ec      	bne.n	80001be <calc_SAE_J1850+0x4e>
  for (idx = 0; idx < Crc_len + 1; idx++)
 80001e4:	7bbb      	ldrb	r3, [r7, #14]
 80001e6:	3301      	adds	r3, #1
 80001e8:	73bb      	strb	r3, [r7, #14]
 80001ea:	7bbb      	ldrb	r3, [r7, #14]
 80001ec:	683a      	ldr	r2, [r7, #0]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	dad0      	bge.n	8000194 <calc_SAE_J1850+0x24>
      }
    }
  }
  return crc;
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	3714      	adds	r7, #20
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
	...

08000200 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000208:	4b13      	ldr	r3, [pc, #76]	; (8000258 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800020a:	4a14      	ldr	r2, [pc, #80]	; (800025c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800020c:	2100      	movs	r1, #0
 800020e:	6878      	ldr	r0, [r7, #4]
 8000210:	f000 fec2 	bl	8000f98 <HAL_CAN_GetRxMessage>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 800021a:	f000 fa47 	bl	80006ac <Error_Handler>
  }
  if (RxHeader.StdId == 0x012 && RxHeader.DLC == 8)
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b12      	cmp	r3, #18
 8000224:	d113      	bne.n	800024e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
 8000226:	4b0d      	ldr	r3, [pc, #52]	; (800025c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000228:	691b      	ldr	r3, [r3, #16]
 800022a:	2b08      	cmp	r3, #8
 800022c:	d10f      	bne.n	800024e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
  {
    uint8_t checksum_rx_b2 = (uint8_t)calc_SAE_J1850(RxData, 7);
 800022e:	2107      	movs	r1, #7
 8000230:	4809      	ldr	r0, [pc, #36]	; (8000258 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000232:	f7ff ff9d 	bl	8000170 <calc_SAE_J1850>
 8000236:	4603      	mov	r3, r0
 8000238:	73fb      	strb	r3, [r7, #15]
    if (RxData[7] == checksum_rx_b2)
 800023a:	4b07      	ldr	r3, [pc, #28]	; (8000258 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800023c:	79db      	ldrb	r3, [r3, #7]
 800023e:	7bfa      	ldrb	r2, [r7, #15]
 8000240:	429a      	cmp	r2, r3
 8000242:	d104      	bne.n	800024e <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
    {
      HAL_GPIO_TogglePin(ledonboard_GPIO_Port, ledonboard_Pin);
 8000244:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000248:	4805      	ldr	r0, [pc, #20]	; (8000260 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800024a:	f001 fcb9 	bl	8001bc0 <HAL_GPIO_TogglePin>
    }
  }
}
 800024e:	bf00      	nop
 8000250:	3710      	adds	r7, #16
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20000178 	.word	0x20000178
 800025c:	20000154 	.word	0x20000154
 8000260:	40011000 	.word	0x40011000

08000264 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  if(htim == &htim3)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4a2d      	ldr	r2, [pc, #180]	; (8000324 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000270:	4293      	cmp	r3, r2
 8000272:	d153      	bne.n	800031c <HAL_TIM_PeriodElapsedCallback+0xb8>
  {

     TxData[6] = msgCnt;
 8000274:	4b2c      	ldr	r3, [pc, #176]	; (8000328 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000276:	781a      	ldrb	r2, [r3, #0]
 8000278:	4b2c      	ldr	r3, [pc, #176]	; (800032c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800027a:	719a      	strb	r2, [r3, #6]
     if (msgCnt == 0xFF)
 800027c:	4b2a      	ldr	r3, [pc, #168]	; (8000328 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2bff      	cmp	r3, #255	; 0xff
 8000282:	d103      	bne.n	800028c <HAL_TIM_PeriodElapsedCallback+0x28>
     {
       msgCnt = 0x00;
 8000284:	4b28      	ldr	r3, [pc, #160]	; (8000328 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000286:	2200      	movs	r2, #0
 8000288:	701a      	strb	r2, [r3, #0]
 800028a:	e005      	b.n	8000298 <HAL_TIM_PeriodElapsedCallback+0x34>
     }
     else
     {
       msgCnt++;
 800028c:	4b26      	ldr	r3, [pc, #152]	; (8000328 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	b2da      	uxtb	r2, r3
 8000294:	4b24      	ldr	r3, [pc, #144]	; (8000328 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000296:	701a      	strb	r2, [r3, #0]
     }
     uint8_t checksum_tx_b2 = calc_SAE_J1850(TxData, 7);
 8000298:	2107      	movs	r1, #7
 800029a:	4824      	ldr	r0, [pc, #144]	; (800032c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800029c:	f7ff ff68 	bl	8000170 <calc_SAE_J1850>
 80002a0:	4603      	mov	r3, r0
 80002a2:	73fb      	strb	r3, [r7, #15]
     TxData[7] = checksum_tx_b2;
 80002a4:	4a21      	ldr	r2, [pc, #132]	; (800032c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
 80002a8:	71d3      	strb	r3, [r2, #7]

     if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80002aa:	4b21      	ldr	r3, [pc, #132]	; (8000330 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80002ac:	4a1f      	ldr	r2, [pc, #124]	; (800032c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80002ae:	4921      	ldr	r1, [pc, #132]	; (8000334 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80002b0:	4821      	ldr	r0, [pc, #132]	; (8000338 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80002b2:	f000 fda2 	bl	8000dfa <HAL_CAN_AddTxMessage>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d002      	beq.n	80002c2 <HAL_TIM_PeriodElapsedCallback+0x5e>
     {
       Error_Handler();
 80002bc:	f000 f9f6 	bl	80006ac <Error_Handler>
 80002c0:	e027      	b.n	8000312 <HAL_TIM_PeriodElapsedCallback+0xae>
     }else{
       printf("CAN: ");
 80002c2:	481e      	ldr	r0, [pc, #120]	; (800033c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80002c4:	f002 ff36 	bl	8003134 <iprintf>
       for (int i = 0; i < 4; i++){
 80002c8:	2300      	movs	r3, #0
 80002ca:	617b      	str	r3, [r7, #20]
 80002cc:	e00a      	b.n	80002e4 <HAL_TIM_PeriodElapsedCallback+0x80>
         printf("%d ", TxData[i]);
 80002ce:	4a17      	ldr	r2, [pc, #92]	; (800032c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	4413      	add	r3, r2
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	4619      	mov	r1, r3
 80002d8:	4819      	ldr	r0, [pc, #100]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80002da:	f002 ff2b 	bl	8003134 <iprintf>
       for (int i = 0; i < 4; i++){
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	3301      	adds	r3, #1
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	ddf1      	ble.n	80002ce <HAL_TIM_PeriodElapsedCallback+0x6a>
       }
       printf("\r\n");
 80002ea:	4816      	ldr	r0, [pc, #88]	; (8000344 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80002ec:	f002 ff88 	bl	8003200 <puts>
       for (int i = 4; i < 8; i++){
 80002f0:	2304      	movs	r3, #4
 80002f2:	613b      	str	r3, [r7, #16]
 80002f4:	e00a      	b.n	800030c <HAL_TIM_PeriodElapsedCallback+0xa8>
         printf("%d ", TxData[i]);
 80002f6:	4a0d      	ldr	r2, [pc, #52]	; (800032c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80002f8:	693b      	ldr	r3, [r7, #16]
 80002fa:	4413      	add	r3, r2
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	4619      	mov	r1, r3
 8000300:	480f      	ldr	r0, [pc, #60]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000302:	f002 ff17 	bl	8003134 <iprintf>
       for (int i = 4; i < 8; i++){
 8000306:	693b      	ldr	r3, [r7, #16]
 8000308:	3301      	adds	r3, #1
 800030a:	613b      	str	r3, [r7, #16]
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	2b07      	cmp	r3, #7
 8000310:	ddf1      	ble.n	80002f6 <HAL_TIM_PeriodElapsedCallback+0x92>
       }
     }
     HAL_GPIO_TogglePin(ledr_GPIO_Port, ledr_Pin);
 8000312:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000316:	480c      	ldr	r0, [pc, #48]	; (8000348 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000318:	f001 fc52 	bl	8001bc0 <HAL_GPIO_TogglePin>

  }
}
 800031c:	bf00      	nop
 800031e:	3718      	adds	r7, #24
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	200000ac 	.word	0x200000ac
 8000328:	20000184 	.word	0x20000184
 800032c:	20000170 	.word	0x20000170
 8000330:	20000180 	.word	0x20000180
 8000334:	2000013c 	.word	0x2000013c
 8000338:	20000084 	.word	0x20000084
 800033c:	08003efc 	.word	0x08003efc
 8000340:	08003f04 	.word	0x08003f04
 8000344:	08003f08 	.word	0x08003f08
 8000348:	40010c00 	.word	0x40010c00

0800034c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  for (uint8_t celTx = 0; celTx < 8; celTx++)
 8000352:	2300      	movs	r3, #0
 8000354:	71fb      	strb	r3, [r7, #7]
 8000356:	e006      	b.n	8000366 <main+0x1a>
  {
	TxData[celTx] = 0;
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	4a1e      	ldr	r2, [pc, #120]	; (80003d4 <main+0x88>)
 800035c:	2100      	movs	r1, #0
 800035e:	54d1      	strb	r1, [r2, r3]
  for (uint8_t celTx = 0; celTx < 8; celTx++)
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	3301      	adds	r3, #1
 8000364:	71fb      	strb	r3, [r7, #7]
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	2b07      	cmp	r3, #7
 800036a:	d9f5      	bls.n	8000358 <main+0xc>
  }
  TxData[0] = 1;
 800036c:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <main+0x88>)
 800036e:	2201      	movs	r2, #1
 8000370:	701a      	strb	r2, [r3, #0]
  TxData[1] = 2;
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <main+0x88>)
 8000374:	2202      	movs	r2, #2
 8000376:	705a      	strb	r2, [r3, #1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000378:	f000 fb9e 	bl	8000ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800037c:	f000 f832 	bl	80003e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000380:	f000 f926 	bl	80005d0 <MX_GPIO_Init>
  MX_CAN_Init();
 8000384:	f000 f874 	bl	8000470 <MX_CAN_Init>
  MX_TIM3_Init();
 8000388:	f000 f8aa 	bl	80004e0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800038c:	f000 f8f6 	bl	800057c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  TxHeader.DLC = 8;
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <main+0x8c>)
 8000392:	2208      	movs	r2, #8
 8000394:	611a      	str	r2, [r3, #16]
  TxHeader.StdId = 0x0A2;
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <main+0x8c>)
 8000398:	22a2      	movs	r2, #162	; 0xa2
 800039a:	601a      	str	r2, [r3, #0]
  TxHeader.IDE = CAN_ID_STD;
 800039c:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <main+0x8c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <main+0x8c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	60da      	str	r2, [r3, #12]

  HAL_TIM_Base_Start_IT(&htim3);
 80003a8:	480c      	ldr	r0, [pc, #48]	; (80003dc <main+0x90>)
 80003aa:	f002 f883 	bl	80024b4 <HAL_TIM_Base_Start_IT>

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80003ae:	480c      	ldr	r0, [pc, #48]	; (80003e0 <main+0x94>)
 80003b0:	f000 fcdf 	bl	8000d72 <HAL_CAN_Start>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <main+0x72>
  {
     Error_Handler();
 80003ba:	f000 f977 	bl	80006ac <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80003be:	2102      	movs	r1, #2
 80003c0:	4807      	ldr	r0, [pc, #28]	; (80003e0 <main+0x94>)
 80003c2:	f000 ff0a 	bl	80011da <HAL_CAN_ActivateNotification>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <main+0x84>
  {
    Error_Handler();
 80003cc:	f000 f96e 	bl	80006ac <Error_Handler>
//  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <main+0x84>
 80003d2:	bf00      	nop
 80003d4:	20000170 	.word	0x20000170
 80003d8:	2000013c 	.word	0x2000013c
 80003dc:	200000ac 	.word	0x200000ac
 80003e0:	20000084 	.word	0x20000084

080003e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b090      	sub	sp, #64	; 0x40
 80003e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ea:	f107 0318 	add.w	r3, r7, #24
 80003ee:	2228      	movs	r2, #40	; 0x28
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f002 ffe4 	bl	80033c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000406:	2301      	movs	r3, #1
 8000408:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000414:	2301      	movs	r3, #1
 8000416:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000418:	2302      	movs	r3, #2
 800041a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000420:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000422:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000426:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	f107 0318 	add.w	r3, r7, #24
 800042c:	4618      	mov	r0, r3
 800042e:	f001 fbe1 	bl	8001bf4 <HAL_RCC_OscConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000438:	f000 f938 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043c:	230f      	movs	r3, #15
 800043e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000440:	2302      	movs	r3, #2
 8000442:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2102      	movs	r1, #2
 8000456:	4618      	mov	r0, r3
 8000458:	f001 fe4e 	bl	80020f8 <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000462:	f000 f923 	bl	80006ac <Error_Handler>
  }
}
 8000466:	bf00      	nop
 8000468:	3740      	adds	r7, #64	; 0x40
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_CAN_Init+0x68>)
 8000476:	4a19      	ldr	r2, [pc, #100]	; (80004dc <MX_CAN_Init+0x6c>)
 8000478:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <MX_CAN_Init+0x68>)
 800047c:	2204      	movs	r2, #4
 800047e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_CAN_Init+0x68>)
 8000482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000486:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000488:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <MX_CAN_Init+0x68>)
 800048a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800048e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <MX_CAN_Init+0x68>)
 8000492:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000496:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000498:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <MX_CAN_Init+0x68>)
 800049a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800049e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004a0:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <MX_CAN_Init+0x68>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <MX_CAN_Init+0x68>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <MX_CAN_Init+0x68>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <MX_CAN_Init+0x68>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <MX_CAN_Init+0x68>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <MX_CAN_Init+0x68>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004c4:	4804      	ldr	r0, [pc, #16]	; (80004d8 <MX_CAN_Init+0x68>)
 80004c6:	f000 fb59 	bl	8000b7c <HAL_CAN_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_CAN_Init+0x64>
  {
    Error_Handler();
 80004d0:	f000 f8ec 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000084 	.word	0x20000084
 80004dc:	40006400 	.word	0x40006400

080004e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f4:	463b      	mov	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004fc:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <MX_TIM3_Init+0x94>)
 80004fe:	4a1e      	ldr	r2, [pc, #120]	; (8000578 <MX_TIM3_Init+0x98>)
 8000500:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200 - 1;
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_TIM3_Init+0x94>)
 8000504:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000508:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_TIM3_Init+0x94>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <MX_TIM3_Init+0x94>)
 8000512:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000516:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000518:	4b16      	ldr	r3, [pc, #88]	; (8000574 <MX_TIM3_Init+0x94>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800051e:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_TIM3_Init+0x94>)
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000524:	4813      	ldr	r0, [pc, #76]	; (8000574 <MX_TIM3_Init+0x94>)
 8000526:	f001 ff75 	bl	8002414 <HAL_TIM_Base_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000530:	f000 f8bc 	bl	80006ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	4619      	mov	r1, r3
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <MX_TIM3_Init+0x94>)
 8000542:	f002 f911 	bl	8002768 <HAL_TIM_ConfigClockSource>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800054c:	f000 f8ae 	bl	80006ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000550:	2300      	movs	r3, #0
 8000552:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_TIM3_Init+0x94>)
 800055e:	f002 fae7 	bl	8002b30 <HAL_TIMEx_MasterConfigSynchronization>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000568:	f000 f8a0 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200000ac 	.word	0x200000ac
 8000578:	40000400 	.word	0x40000400

0800057c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000582:	4a12      	ldr	r2, [pc, #72]	; (80005cc <MX_USART1_UART_Init+0x50>)
 8000584:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800058c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005a2:	220c      	movs	r2, #12
 80005a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_USART1_UART_Init+0x4c>)
 80005b4:	f002 fb2c 	bl	8002c10 <HAL_UART_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005be:	f000 f875 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000f4 	.word	0x200000f4
 80005cc:	40013800 	.word	0x40013800

080005d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e4:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <MX_GPIO_Init+0xd0>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a2d      	ldr	r2, [pc, #180]	; (80006a0 <MX_GPIO_Init+0xd0>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <MX_GPIO_Init+0xd0>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0310 	and.w	r3, r3, #16
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <MX_GPIO_Init+0xd0>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <MX_GPIO_Init+0xd0>)
 8000602:	f043 0320 	orr.w	r3, r3, #32
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <MX_GPIO_Init+0xd0>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0320 	and.w	r3, r3, #32
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <MX_GPIO_Init+0xd0>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <MX_GPIO_Init+0xd0>)
 800061a:	f043 0308 	orr.w	r3, r3, #8
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_GPIO_Init+0xd0>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0308 	and.w	r3, r3, #8
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_GPIO_Init+0xd0>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <MX_GPIO_Init+0xd0>)
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_GPIO_Init+0xd0>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0304 	and.w	r3, r3, #4
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ledonboard_GPIO_Port, ledonboard_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <MX_GPIO_Init+0xd4>)
 800064c:	f001 faa0 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ledb_Pin|ledg_Pin|ledr_Pin, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000656:	4814      	ldr	r0, [pc, #80]	; (80006a8 <MX_GPIO_Init+0xd8>)
 8000658:	f001 fa9a 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ledonboard_Pin */
  GPIO_InitStruct.Pin = ledonboard_Pin;
 800065c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2302      	movs	r3, #2
 800066c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ledonboard_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	4619      	mov	r1, r3
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <MX_GPIO_Init+0xd4>)
 8000676:	f001 f907 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pins : ledb_Pin ledg_Pin ledr_Pin */
  GPIO_InitStruct.Pin = ledb_Pin|ledg_Pin|ledr_Pin;
 800067a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4619      	mov	r1, r3
 8000692:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_GPIO_Init+0xd8>)
 8000694:	f001 f8f8 	bl	8001888 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40011000 	.word	0x40011000
 80006a8:	40010c00 	.word	0x40010c00

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <Error_Handler+0x8>
	...

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_MspInit+0x5c>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	4a14      	ldr	r2, [pc, #80]	; (8000714 <HAL_MspInit+0x5c>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6193      	str	r3, [r2, #24]
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_MspInit+0x5c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_MspInit+0x5c>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <HAL_MspInit+0x5c>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_MspInit+0x5c>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <HAL_MspInit+0x60>)
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <HAL_MspInit+0x60>)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40021000 	.word	0x40021000
 8000718:	40010000 	.word	0x40010000

0800071c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a20      	ldr	r2, [pc, #128]	; (80007b8 <HAL_CAN_MspInit+0x9c>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d139      	bne.n	80007b0 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <HAL_CAN_MspInit+0xa0>)
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	4a1e      	ldr	r2, [pc, #120]	; (80007bc <HAL_CAN_MspInit+0xa0>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	61d3      	str	r3, [r2, #28]
 8000748:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <HAL_CAN_MspInit+0xa0>)
 800074a:	69db      	ldr	r3, [r3, #28]
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <HAL_CAN_MspInit+0xa0>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a18      	ldr	r2, [pc, #96]	; (80007bc <HAL_CAN_MspInit+0xa0>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <HAL_CAN_MspInit+0xa0>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800076c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000770:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	4619      	mov	r1, r3
 8000780:	480f      	ldr	r0, [pc, #60]	; (80007c0 <HAL_CAN_MspInit+0xa4>)
 8000782:	f001 f881 	bl	8001888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4619      	mov	r1, r3
 800079a:	4809      	ldr	r0, [pc, #36]	; (80007c0 <HAL_CAN_MspInit+0xa4>)
 800079c:	f001 f874 	bl	8001888 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2014      	movs	r0, #20
 80007a6:	f001 f838 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80007aa:	2014      	movs	r0, #20
 80007ac:	f001 f851 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40006400 	.word	0x40006400
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40010800 	.word	0x40010800

080007c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <HAL_TIM_Base_MspInit+0x44>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d113      	bne.n	80007fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <HAL_TIM_Base_MspInit+0x48>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a0c      	ldr	r2, [pc, #48]	; (800080c <HAL_TIM_Base_MspInit+0x48>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_TIM_Base_MspInit+0x48>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	201d      	movs	r0, #29
 80007f4:	f001 f811 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007f8:	201d      	movs	r0, #29
 80007fa:	f001 f82a 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40000400 	.word	0x40000400
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <HAL_UART_MspInit+0x8c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d131      	bne.n	8000894 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <HAL_UART_MspInit+0x90>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a1a      	ldr	r2, [pc, #104]	; (80008a0 <HAL_UART_MspInit+0x90>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <HAL_UART_MspInit+0x90>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_UART_MspInit+0x90>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <HAL_UART_MspInit+0x90>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_UART_MspInit+0x90>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000864:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	4619      	mov	r1, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <HAL_UART_MspInit+0x94>)
 8000876:	f001 f807 	bl	8001888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4619      	mov	r1, r3
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <HAL_UART_MspInit+0x94>)
 8000890:	f000 fffa 	bl	8001888 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40013800 	.word	0x40013800
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010800 	.word	0x40010800

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ac:	e7fe      	b.n	80008ac <NMI_Handler+0x4>

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <MemManage_Handler+0x4>

080008ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ee:	f000 f929 	bl	8000b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008fe:	f000 fc91 	bl	8001224 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000084 	.word	0x20000084

0800090c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <TIM3_IRQHandler+0x10>)
 8000912:	f001 fe21 	bl	8002558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000ac 	.word	0x200000ac

08000920 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	e00a      	b.n	8000948 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000932:	f3af 8000 	nop.w
 8000936:	4601      	mov	r1, r0
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	60ba      	str	r2, [r7, #8]
 800093e:	b2ca      	uxtb	r2, r1
 8000940:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	dbf0      	blt.n	8000932 <_read+0x12>
  }

  return len;
 8000950:	687b      	ldr	r3, [r7, #4]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	60f8      	str	r0, [r7, #12]
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	e009      	b.n	8000980 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	60ba      	str	r2, [r7, #8]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fbe9 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	3301      	adds	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	dbf1      	blt.n	800096c <_write+0x12>
  }
  return len;
 8000988:	687b      	ldr	r3, [r7, #4]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <_close>:

int _close(int file)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800099e:	4618      	mov	r0, r3
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b8:	605a      	str	r2, [r3, #4]
  return 0;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <_isatty>:

int _isatty(int file)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr

080009da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009da:	b480      	push	{r7}
 80009dc:	b085      	sub	sp, #20
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr
	...

080009f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009fc:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <_sbrk+0x5c>)
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <_sbrk+0x60>)
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d102      	bne.n	8000a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <_sbrk+0x64>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <_sbrk+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d207      	bcs.n	8000a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a24:	f002 fd1a 	bl	800345c <__errno>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a32:	e009      	b.n	8000a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3a:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <_sbrk+0x64>)
 8000a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20005000 	.word	0x20005000
 8000a54:	00000400 	.word	0x00000400
 8000a58:	20000188 	.word	0x20000188
 8000a5c:	200002e0 	.word	0x200002e0

08000a60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a6c:	f7ff fff8 	bl	8000a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a72:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a74:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a09      	ldr	r2, [pc, #36]	; (8000aac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a88:	4c09      	ldr	r4, [pc, #36]	; (8000ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a96:	f002 fce7 	bl	8003468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a9a:	f7ff fc57 	bl	800034c <main>
  bx lr
 8000a9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000aa8:	08003f74 	.word	0x08003f74
  ldr r2, =_sbss
 8000aac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ab0:	200002dc 	.word	0x200002dc

08000ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC1_2_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <HAL_Init+0x28>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_Init+0x28>)
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 fe9b 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f000 f808 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad4:	f7ff fdf0 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40022000 	.word	0x40022000

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x54>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x58>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 feb3 	bl	800186e <HAL_SYSTICK_Config>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00e      	b.n	8000b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d80a      	bhi.n	8000b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b20:	f000 fe7b 	bl	800181a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <HAL_InitTick+0x5c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000004 	.word	0x20000004

08000b44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x1c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_IncTick+0x20>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a03      	ldr	r2, [pc, #12]	; (8000b64 <HAL_IncTick+0x20>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	20000008 	.word	0x20000008
 8000b64:	2000018c 	.word	0x2000018c

08000b68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b02      	ldr	r3, [pc, #8]	; (8000b78 <HAL_GetTick+0x10>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	2000018c 	.word	0x2000018c

08000b7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e0ed      	b.n	8000d6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d102      	bne.n	8000ba0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fdbe 	bl	800071c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f042 0201 	orr.w	r2, r2, #1
 8000bae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bb0:	f7ff ffda 	bl	8000b68 <HAL_GetTick>
 8000bb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bb6:	e012      	b.n	8000bde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bb8:	f7ff ffd6 	bl	8000b68 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b0a      	cmp	r3, #10
 8000bc4:	d90b      	bls.n	8000bde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2205      	movs	r2, #5
 8000bd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e0c5      	b.n	8000d6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d0e5      	beq.n	8000bb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f022 0202 	bic.w	r2, r2, #2
 8000bfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bfc:	f7ff ffb4 	bl	8000b68 <HAL_GetTick>
 8000c00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c02:	e012      	b.n	8000c2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c04:	f7ff ffb0 	bl	8000b68 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b0a      	cmp	r3, #10
 8000c10:	d90b      	bls.n	8000c2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2205      	movs	r2, #5
 8000c22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e09f      	b.n	8000d6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1e5      	bne.n	8000c04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7e1b      	ldrb	r3, [r3, #24]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d108      	bne.n	8000c52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	e007      	b.n	8000c62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7e5b      	ldrb	r3, [r3, #25]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d108      	bne.n	8000c7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e007      	b.n	8000c8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7e9b      	ldrb	r3, [r3, #26]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d108      	bne.n	8000ca6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f042 0220 	orr.w	r2, r2, #32
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	e007      	b.n	8000cb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0220 	bic.w	r2, r2, #32
 8000cb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	7edb      	ldrb	r3, [r3, #27]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d108      	bne.n	8000cd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f022 0210 	bic.w	r2, r2, #16
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	e007      	b.n	8000ce0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f042 0210 	orr.w	r2, r2, #16
 8000cde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	7f1b      	ldrb	r3, [r3, #28]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d108      	bne.n	8000cfa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f042 0208 	orr.w	r2, r2, #8
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	e007      	b.n	8000d0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 0208 	bic.w	r2, r2, #8
 8000d08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7f5b      	ldrb	r3, [r3, #29]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d108      	bne.n	8000d24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f042 0204 	orr.w	r2, r2, #4
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	e007      	b.n	8000d34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0204 	bic.w	r2, r2, #4
 8000d32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	ea42 0103 	orr.w	r1, r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	1e5a      	subs	r2, r3, #1
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d12e      	bne.n	8000de4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2202      	movs	r2, #2
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0201 	bic.w	r2, r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d9e:	f7ff fee3 	bl	8000b68 <HAL_GetTick>
 8000da2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000da4:	e012      	b.n	8000dcc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000da6:	f7ff fedf 	bl	8000b68 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b0a      	cmp	r3, #10
 8000db2:	d90b      	bls.n	8000dcc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2205      	movs	r2, #5
 8000dc4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e012      	b.n	8000df2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1e5      	bne.n	8000da6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	e006      	b.n	8000df2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
  }
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b089      	sub	sp, #36	; 0x24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e18:	7ffb      	ldrb	r3, [r7, #31]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d003      	beq.n	8000e26 <HAL_CAN_AddTxMessage+0x2c>
 8000e1e:	7ffb      	ldrb	r3, [r7, #31]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	f040 80ad 	bne.w	8000f80 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d10a      	bne.n	8000e46 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d105      	bne.n	8000e46 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 8095 	beq.w	8000f70 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	0e1b      	lsrs	r3, r3, #24
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e50:	2201      	movs	r2, #1
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	409a      	lsls	r2, r3
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10d      	bne.n	8000e7e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e6c:	68f9      	ldr	r1, [r7, #12]
 8000e6e:	6809      	ldr	r1, [r1, #0]
 8000e70:	431a      	orrs	r2, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3318      	adds	r3, #24
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	440b      	add	r3, r1
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	e00f      	b.n	8000e9e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e88:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e8e:	68f9      	ldr	r1, [r7, #12]
 8000e90:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e92:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3318      	adds	r3, #24
 8000e98:	011b      	lsls	r3, r3, #4
 8000e9a:	440b      	add	r3, r1
 8000e9c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6819      	ldr	r1, [r3, #0]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	691a      	ldr	r2, [r3, #16]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3318      	adds	r3, #24
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	440b      	add	r3, r1
 8000eae:	3304      	adds	r3, #4
 8000eb0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	7d1b      	ldrb	r3, [r3, #20]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d111      	bne.n	8000ede <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3318      	adds	r3, #24
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	6811      	ldr	r1, [r2, #0]
 8000ece:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3318      	adds	r3, #24
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	440b      	add	r3, r1
 8000eda:	3304      	adds	r3, #4
 8000edc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3307      	adds	r3, #7
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	061a      	lsls	r2, r3, #24
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3306      	adds	r3, #6
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	041b      	lsls	r3, r3, #16
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3305      	adds	r3, #5
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	3204      	adds	r2, #4
 8000efe:	7812      	ldrb	r2, [r2, #0]
 8000f00:	4610      	mov	r0, r2
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	6811      	ldr	r1, [r2, #0]
 8000f06:	ea43 0200 	orr.w	r2, r3, r0
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	440b      	add	r3, r1
 8000f10:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000f14:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3303      	adds	r3, #3
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	061a      	lsls	r2, r3, #24
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3302      	adds	r3, #2
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	041b      	lsls	r3, r3, #16
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	021b      	lsls	r3, r3, #8
 8000f30:	4313      	orrs	r3, r2
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	4610      	mov	r0, r2
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	6811      	ldr	r1, [r2, #0]
 8000f3c:	ea43 0200 	orr.w	r2, r3, r0
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	011b      	lsls	r3, r3, #4
 8000f44:	440b      	add	r3, r1
 8000f46:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000f4a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3318      	adds	r3, #24
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	4413      	add	r3, r2
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	6811      	ldr	r1, [r2, #0]
 8000f5e:	f043 0201 	orr.w	r2, r3, #1
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3318      	adds	r3, #24
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	440b      	add	r3, r1
 8000f6a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e00e      	b.n	8000f8e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e006      	b.n	8000f8e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
  }
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d003      	beq.n	8000fbc <HAL_CAN_GetRxMessage+0x24>
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	f040 8103 	bne.w	80011c2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10e      	bne.n	8000fe0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d116      	bne.n	8000ffe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0f7      	b.n	80011d0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d107      	bne.n	8000ffe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e0e8      	b.n	80011d0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	331b      	adds	r3, #27
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4413      	add	r3, r2
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0204 	and.w	r2, r3, #4
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10c      	bne.n	8001036 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	331b      	adds	r3, #27
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	4413      	add	r3, r2
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	0d5b      	lsrs	r3, r3, #21
 800102c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e00b      	b.n	800104e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	331b      	adds	r3, #27
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	4413      	add	r3, r2
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	08db      	lsrs	r3, r3, #3
 8001046:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	331b      	adds	r3, #27
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	4413      	add	r3, r2
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0202 	and.w	r2, r3, #2
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	331b      	adds	r3, #27
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	4413      	add	r3, r2
 8001070:	3304      	adds	r3, #4
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2208      	movs	r2, #8
 8001080:	611a      	str	r2, [r3, #16]
 8001082:	e00b      	b.n	800109c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	331b      	adds	r3, #27
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	4413      	add	r3, r2
 8001090:	3304      	adds	r3, #4
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 020f 	and.w	r2, r3, #15
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	331b      	adds	r3, #27
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	4413      	add	r3, r2
 80010a8:	3304      	adds	r3, #4
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	331b      	adds	r3, #27
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	4413      	add	r3, r2
 80010c0:	3304      	adds	r3, #4
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	0c1b      	lsrs	r3, r3, #16
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	4413      	add	r3, r2
 80010d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	4413      	add	r3, r2
 80010ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	0a1a      	lsrs	r2, r3, #8
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4413      	add	r3, r2
 8001106:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	0c1a      	lsrs	r2, r3, #16
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3302      	adds	r3, #2
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	4413      	add	r3, r2
 8001120:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	0e1a      	lsrs	r2, r3, #24
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	3303      	adds	r3, #3
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	4413      	add	r3, r2
 800113a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3304      	adds	r3, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4413      	add	r3, r2
 8001152:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0a1a      	lsrs	r2, r3, #8
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	3305      	adds	r3, #5
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	4413      	add	r3, r2
 800116c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	0c1a      	lsrs	r2, r3, #16
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	3306      	adds	r3, #6
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	4413      	add	r3, r2
 8001186:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	0e1a      	lsrs	r2, r3, #24
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	3307      	adds	r3, #7
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d108      	bne.n	80011ae <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0220 	orr.w	r2, r2, #32
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	e007      	b.n	80011be <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f042 0220 	orr.w	r2, r2, #32
 80011bc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	e006      	b.n	80011d0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
  }
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	371c      	adds	r7, #28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr

080011da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80011da:	b480      	push	{r7}
 80011dc:	b085      	sub	sp, #20
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d002      	beq.n	80011f8 <HAL_CAN_ActivateNotification+0x1e>
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d109      	bne.n	800120c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6959      	ldr	r1, [r3, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	e006      	b.n	800121a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
  }
}
 800121a:	4618      	mov	r0, r3
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001260:	6a3b      	ldr	r3, [r7, #32]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d07c      	beq.n	8001364 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d023      	beq.n	80012bc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2201      	movs	r2, #1
 800127a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f983 	bl	8001592 <HAL_CAN_TxMailbox0CompleteCallback>
 800128c:	e016      	b.n	80012bc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b00      	cmp	r3, #0
 8001296:	d004      	beq.n	80012a2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
 80012a0:	e00c      	b.n	80012bc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d004      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
 80012b4:	e002      	b.n	80012bc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f986 	bl	80015c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d024      	beq.n	8001310 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f962 	bl	80015a4 <HAL_CAN_TxMailbox1CompleteCallback>
 80012e0:	e016      	b.n	8001310 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
 80012f4:	e00c      	b.n	8001310 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
 8001308:	e002      	b.n	8001310 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f965 	bl	80015da <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d024      	beq.n	8001364 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001322:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f941 	bl	80015b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001334:	e016      	b.n	8001364 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d004      	beq.n	800134a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
 8001348:	e00c      	b.n	8001364 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d004      	beq.n	800135e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
 800135c:	e002      	b.n	8001364 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f944 	bl	80015ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00c      	beq.n	8001388 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	2b00      	cmp	r3, #0
 8001376:	d007      	beq.n	8001388 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2210      	movs	r2, #16
 8001386:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00b      	beq.n	80013aa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d006      	beq.n	80013aa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2208      	movs	r2, #8
 80013a2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f92a 	bl	80015fe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d009      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7fe ff1c 	bl	8000200 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00c      	beq.n	80013ec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d007      	beq.n	80013ec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2210      	movs	r2, #16
 80013ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	f003 0320 	and.w	r3, r3, #32
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2208      	movs	r2, #8
 8001406:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f90a 	bl	8001622 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	2b00      	cmp	r3, #0
 8001416:	d009      	beq.n	800142c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d002      	beq.n	800142c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f8f2 	bl	8001610 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00b      	beq.n	800144e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2210      	movs	r2, #16
 8001446:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f8f3 	bl	8001634 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00b      	beq.n	8001470 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d006      	beq.n	8001470 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2208      	movs	r2, #8
 8001468:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f8eb 	bl	8001646 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d07b      	beq.n	8001572 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d072      	beq.n	800156a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148a:	2b00      	cmp	r3, #0
 800148c:	d008      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d008      	beq.n	80014bc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d008      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d043      	beq.n	800156a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d03e      	beq.n	800156a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014f2:	2b60      	cmp	r3, #96	; 0x60
 80014f4:	d02b      	beq.n	800154e <HAL_CAN_IRQHandler+0x32a>
 80014f6:	2b60      	cmp	r3, #96	; 0x60
 80014f8:	d82e      	bhi.n	8001558 <HAL_CAN_IRQHandler+0x334>
 80014fa:	2b50      	cmp	r3, #80	; 0x50
 80014fc:	d022      	beq.n	8001544 <HAL_CAN_IRQHandler+0x320>
 80014fe:	2b50      	cmp	r3, #80	; 0x50
 8001500:	d82a      	bhi.n	8001558 <HAL_CAN_IRQHandler+0x334>
 8001502:	2b40      	cmp	r3, #64	; 0x40
 8001504:	d019      	beq.n	800153a <HAL_CAN_IRQHandler+0x316>
 8001506:	2b40      	cmp	r3, #64	; 0x40
 8001508:	d826      	bhi.n	8001558 <HAL_CAN_IRQHandler+0x334>
 800150a:	2b30      	cmp	r3, #48	; 0x30
 800150c:	d010      	beq.n	8001530 <HAL_CAN_IRQHandler+0x30c>
 800150e:	2b30      	cmp	r3, #48	; 0x30
 8001510:	d822      	bhi.n	8001558 <HAL_CAN_IRQHandler+0x334>
 8001512:	2b10      	cmp	r3, #16
 8001514:	d002      	beq.n	800151c <HAL_CAN_IRQHandler+0x2f8>
 8001516:	2b20      	cmp	r3, #32
 8001518:	d005      	beq.n	8001526 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800151a:	e01d      	b.n	8001558 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	f043 0308 	orr.w	r3, r3, #8
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001524:	e019      	b.n	800155a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	f043 0310 	orr.w	r3, r3, #16
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800152e:	e014      	b.n	800155a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	f043 0320 	orr.w	r3, r3, #32
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001538:	e00f      	b.n	800155a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001542:	e00a      	b.n	800155a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800154c:	e005      	b.n	800155a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001556:	e000      	b.n	800155a <HAL_CAN_IRQHandler+0x336>
            break;
 8001558:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699a      	ldr	r2, [r3, #24]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001568:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2204      	movs	r2, #4
 8001570:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	2b00      	cmp	r3, #0
 8001576:	d008      	beq.n	800158a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 f867 	bl	8001658 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
	...

0800166c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0b      	blt.n	80016fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4906      	ldr	r1, [pc, #24]	; (8001704 <__NVIC_EnableIRQ+0x34>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017e4:	f7ff ff90 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff2d 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff42 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff90 	bl	800175c <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff5f 	bl	8001708 <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff35 	bl	80016d0 <__NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa2 	bl	80017c0 <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	b480      	push	{r7}
 800188a:	b08b      	sub	sp, #44	; 0x2c
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	e169      	b.n	8001b70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800189c:	2201      	movs	r2, #1
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8158 	bne.w	8001b6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4a9a      	ldr	r2, [pc, #616]	; (8001b28 <HAL_GPIO_Init+0x2a0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d05e      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018c4:	4a98      	ldr	r2, [pc, #608]	; (8001b28 <HAL_GPIO_Init+0x2a0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d875      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018ca:	4a98      	ldr	r2, [pc, #608]	; (8001b2c <HAL_GPIO_Init+0x2a4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d058      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018d0:	4a96      	ldr	r2, [pc, #600]	; (8001b2c <HAL_GPIO_Init+0x2a4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d86f      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018d6:	4a96      	ldr	r2, [pc, #600]	; (8001b30 <HAL_GPIO_Init+0x2a8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d052      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018dc:	4a94      	ldr	r2, [pc, #592]	; (8001b30 <HAL_GPIO_Init+0x2a8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d869      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018e2:	4a94      	ldr	r2, [pc, #592]	; (8001b34 <HAL_GPIO_Init+0x2ac>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d04c      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018e8:	4a92      	ldr	r2, [pc, #584]	; (8001b34 <HAL_GPIO_Init+0x2ac>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d863      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018ee:	4a92      	ldr	r2, [pc, #584]	; (8001b38 <HAL_GPIO_Init+0x2b0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d046      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018f4:	4a90      	ldr	r2, [pc, #576]	; (8001b38 <HAL_GPIO_Init+0x2b0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d85d      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018fa:	2b12      	cmp	r3, #18
 80018fc:	d82a      	bhi.n	8001954 <HAL_GPIO_Init+0xcc>
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d859      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 8001902:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <HAL_GPIO_Init+0x80>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	08001983 	.word	0x08001983
 800190c:	0800195d 	.word	0x0800195d
 8001910:	0800196f 	.word	0x0800196f
 8001914:	080019b1 	.word	0x080019b1
 8001918:	080019b7 	.word	0x080019b7
 800191c:	080019b7 	.word	0x080019b7
 8001920:	080019b7 	.word	0x080019b7
 8001924:	080019b7 	.word	0x080019b7
 8001928:	080019b7 	.word	0x080019b7
 800192c:	080019b7 	.word	0x080019b7
 8001930:	080019b7 	.word	0x080019b7
 8001934:	080019b7 	.word	0x080019b7
 8001938:	080019b7 	.word	0x080019b7
 800193c:	080019b7 	.word	0x080019b7
 8001940:	080019b7 	.word	0x080019b7
 8001944:	080019b7 	.word	0x080019b7
 8001948:	080019b7 	.word	0x080019b7
 800194c:	08001965 	.word	0x08001965
 8001950:	08001979 	.word	0x08001979
 8001954:	4a79      	ldr	r2, [pc, #484]	; (8001b3c <HAL_GPIO_Init+0x2b4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800195a:	e02c      	b.n	80019b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	623b      	str	r3, [r7, #32]
          break;
 8001962:	e029      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	3304      	adds	r3, #4
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e024      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	3308      	adds	r3, #8
 8001974:	623b      	str	r3, [r7, #32]
          break;
 8001976:	e01f      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	330c      	adds	r3, #12
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e01a      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800198a:	2304      	movs	r3, #4
 800198c:	623b      	str	r3, [r7, #32]
          break;
 800198e:	e013      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001998:	2308      	movs	r3, #8
 800199a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	611a      	str	r2, [r3, #16]
          break;
 80019a2:	e009      	b.n	80019b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a4:	2308      	movs	r3, #8
 80019a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	615a      	str	r2, [r3, #20]
          break;
 80019ae:	e003      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          break;
 80019b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2bff      	cmp	r3, #255	; 0xff
 80019bc:	d801      	bhi.n	80019c2 <HAL_GPIO_Init+0x13a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	e001      	b.n	80019c6 <HAL_GPIO_Init+0x13e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3304      	adds	r3, #4
 80019c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2bff      	cmp	r3, #255	; 0xff
 80019cc:	d802      	bhi.n	80019d4 <HAL_GPIO_Init+0x14c>
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	e002      	b.n	80019da <HAL_GPIO_Init+0x152>
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	3b08      	subs	r3, #8
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	210f      	movs	r1, #15
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	401a      	ands	r2, r3
 80019ec:	6a39      	ldr	r1, [r7, #32]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	431a      	orrs	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 80b1 	beq.w	8001b6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a08:	4b4d      	ldr	r3, [pc, #308]	; (8001b40 <HAL_GPIO_Init+0x2b8>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a4c      	ldr	r2, [pc, #304]	; (8001b40 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b4a      	ldr	r3, [pc, #296]	; (8001b40 <HAL_GPIO_Init+0x2b8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a20:	4a48      	ldr	r2, [pc, #288]	; (8001b44 <HAL_GPIO_Init+0x2bc>)
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a40      	ldr	r2, [pc, #256]	; (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d013      	beq.n	8001a74 <HAL_GPIO_Init+0x1ec>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3f      	ldr	r2, [pc, #252]	; (8001b4c <HAL_GPIO_Init+0x2c4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d00d      	beq.n	8001a70 <HAL_GPIO_Init+0x1e8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3e      	ldr	r2, [pc, #248]	; (8001b50 <HAL_GPIO_Init+0x2c8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d007      	beq.n	8001a6c <HAL_GPIO_Init+0x1e4>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a3d      	ldr	r2, [pc, #244]	; (8001b54 <HAL_GPIO_Init+0x2cc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_GPIO_Init+0x1e0>
 8001a64:	2303      	movs	r3, #3
 8001a66:	e006      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a68:	2304      	movs	r3, #4
 8001a6a:	e004      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e002      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a74:	2300      	movs	r3, #0
 8001a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a78:	f002 0203 	and.w	r2, r2, #3
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	4093      	lsls	r3, r2
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a86:	492f      	ldr	r1, [pc, #188]	; (8001b44 <HAL_GPIO_Init+0x2bc>)
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa0:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	492c      	ldr	r1, [pc, #176]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aae:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	4928      	ldr	r1, [pc, #160]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac8:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	4922      	ldr	r1, [pc, #136]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60cb      	str	r3, [r1, #12]
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	491e      	ldr	r1, [pc, #120]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4918      	ldr	r1, [pc, #96]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001afe:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	4914      	ldr	r1, [pc, #80]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d021      	beq.n	8001b5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	490e      	ldr	r1, [pc, #56]	; (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	e021      	b.n	8001b6a <HAL_GPIO_Init+0x2e2>
 8001b26:	bf00      	nop
 8001b28:	10320000 	.word	0x10320000
 8001b2c:	10310000 	.word	0x10310000
 8001b30:	10220000 	.word	0x10220000
 8001b34:	10210000 	.word	0x10210000
 8001b38:	10120000 	.word	0x10120000
 8001b3c:	10110000 	.word	0x10110000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000
 8001b48:	40010800 	.word	0x40010800
 8001b4c:	40010c00 	.word	0x40010c00
 8001b50:	40011000 	.word	0x40011000
 8001b54:	40011400 	.word	0x40011400
 8001b58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	4909      	ldr	r1, [pc, #36]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f47f ae8e 	bne.w	800189c <HAL_GPIO_Init+0x14>
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	372c      	adds	r7, #44	; 0x2c
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	40010400 	.word	0x40010400

08001b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba6:	887a      	ldrh	r2, [r7, #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bac:	e003      	b.n	8001bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	041a      	lsls	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	611a      	str	r2, [r3, #16]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	041a      	lsls	r2, r3, #16
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	43d9      	mvns	r1, r3
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	400b      	ands	r3, r1
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	611a      	str	r2, [r3, #16]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e272      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8087 	beq.w	8001d22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c14:	4b92      	ldr	r3, [pc, #584]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d00c      	beq.n	8001c3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c20:	4b8f      	ldr	r3, [pc, #572]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d112      	bne.n	8001c52 <HAL_RCC_OscConfig+0x5e>
 8001c2c:	4b8c      	ldr	r3, [pc, #560]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c38:	d10b      	bne.n	8001c52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3a:	4b89      	ldr	r3, [pc, #548]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d06c      	beq.n	8001d20 <HAL_RCC_OscConfig+0x12c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d168      	bne.n	8001d20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e24c      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x76>
 8001c5c:	4b80      	ldr	r3, [pc, #512]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a7f      	ldr	r2, [pc, #508]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	e02e      	b.n	8001cc8 <HAL_RCC_OscConfig+0xd4>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x98>
 8001c72:	4b7b      	ldr	r3, [pc, #492]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a7a      	ldr	r2, [pc, #488]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b78      	ldr	r3, [pc, #480]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a77      	ldr	r2, [pc, #476]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e01d      	b.n	8001cc8 <HAL_RCC_OscConfig+0xd4>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0xbc>
 8001c96:	4b72      	ldr	r3, [pc, #456]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a71      	ldr	r2, [pc, #452]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b6f      	ldr	r3, [pc, #444]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a6e      	ldr	r2, [pc, #440]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e00b      	b.n	8001cc8 <HAL_RCC_OscConfig+0xd4>
 8001cb0:	4b6b      	ldr	r3, [pc, #428]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a6a      	ldr	r2, [pc, #424]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	4b68      	ldr	r3, [pc, #416]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a67      	ldr	r2, [pc, #412]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d013      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7fe ff4a 	bl	8000b68 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7fe ff46 	bl	8000b68 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e200      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	4b5d      	ldr	r3, [pc, #372]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xe4>
 8001cf6:	e014      	b.n	8001d22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf8:	f7fe ff36 	bl	8000b68 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d00:	f7fe ff32 	bl	8000b68 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e1ec      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	4b53      	ldr	r3, [pc, #332]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x10c>
 8001d1e:	e000      	b.n	8001d22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d063      	beq.n	8001df6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d2e:	4b4c      	ldr	r3, [pc, #304]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00b      	beq.n	8001d52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d3a:	4b49      	ldr	r3, [pc, #292]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d11c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x18c>
 8001d46:	4b46      	ldr	r3, [pc, #280]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d116      	bne.n	8001d80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d52:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d005      	beq.n	8001d6a <HAL_RCC_OscConfig+0x176>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d001      	beq.n	8001d6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e1c0      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6a:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4939      	ldr	r1, [pc, #228]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7e:	e03a      	b.n	8001df6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d020      	beq.n	8001dca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d88:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7fe feeb 	bl	8000b68 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d96:	f7fe fee7 	bl	8000b68 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e1a1      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4927      	ldr	r1, [pc, #156]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	600b      	str	r3, [r1, #0]
 8001dc8:	e015      	b.n	8001df6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dca:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7fe feca 	bl	8000b68 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd8:	f7fe fec6 	bl	8000b68 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e180      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d03a      	beq.n	8001e78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d019      	beq.n	8001e3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <HAL_RCC_OscConfig+0x274>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e10:	f7fe feaa 	bl	8000b68 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e18:	f7fe fea6 	bl	8000b68 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e160      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e36:	2001      	movs	r0, #1
 8001e38:	f000 face 	bl	80023d8 <RCC_Delay>
 8001e3c:	e01c      	b.n	8001e78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_RCC_OscConfig+0x274>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e44:	f7fe fe90 	bl	8000b68 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4a:	e00f      	b.n	8001e6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4c:	f7fe fe8c 	bl	8000b68 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d908      	bls.n	8001e6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e146      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	42420000 	.word	0x42420000
 8001e68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6c:	4b92      	ldr	r3, [pc, #584]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1e9      	bne.n	8001e4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80a6 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8a:	4b8b      	ldr	r3, [pc, #556]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10d      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	4b88      	ldr	r3, [pc, #544]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a87      	ldr	r2, [pc, #540]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	61d3      	str	r3, [r2, #28]
 8001ea2:	4b85      	ldr	r3, [pc, #532]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb2:	4b82      	ldr	r3, [pc, #520]	; (80020bc <HAL_RCC_OscConfig+0x4c8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d118      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ebe:	4b7f      	ldr	r3, [pc, #508]	; (80020bc <HAL_RCC_OscConfig+0x4c8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a7e      	ldr	r2, [pc, #504]	; (80020bc <HAL_RCC_OscConfig+0x4c8>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eca:	f7fe fe4d 	bl	8000b68 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed2:	f7fe fe49 	bl	8000b68 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b64      	cmp	r3, #100	; 0x64
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e103      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	4b75      	ldr	r3, [pc, #468]	; (80020bc <HAL_RCC_OscConfig+0x4c8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_OscConfig+0x312>
 8001ef8:	4b6f      	ldr	r3, [pc, #444]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4a6e      	ldr	r2, [pc, #440]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6213      	str	r3, [r2, #32]
 8001f04:	e02d      	b.n	8001f62 <HAL_RCC_OscConfig+0x36e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x334>
 8001f0e:	4b6a      	ldr	r3, [pc, #424]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a69      	ldr	r2, [pc, #420]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6213      	str	r3, [r2, #32]
 8001f1a:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4a66      	ldr	r2, [pc, #408]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	f023 0304 	bic.w	r3, r3, #4
 8001f24:	6213      	str	r3, [r2, #32]
 8001f26:	e01c      	b.n	8001f62 <HAL_RCC_OscConfig+0x36e>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	d10c      	bne.n	8001f4a <HAL_RCC_OscConfig+0x356>
 8001f30:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a60      	ldr	r2, [pc, #384]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	f043 0304 	orr.w	r3, r3, #4
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	4b5e      	ldr	r3, [pc, #376]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4a5d      	ldr	r2, [pc, #372]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6213      	str	r3, [r2, #32]
 8001f48:	e00b      	b.n	8001f62 <HAL_RCC_OscConfig+0x36e>
 8001f4a:	4b5b      	ldr	r3, [pc, #364]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a5a      	ldr	r2, [pc, #360]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6213      	str	r3, [r2, #32]
 8001f56:	4b58      	ldr	r3, [pc, #352]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4a57      	ldr	r2, [pc, #348]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	f023 0304 	bic.w	r3, r3, #4
 8001f60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d015      	beq.n	8001f96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6a:	f7fe fdfd 	bl	8000b68 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f70:	e00a      	b.n	8001f88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f72:	f7fe fdf9 	bl	8000b68 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e0b1      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f88:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ee      	beq.n	8001f72 <HAL_RCC_OscConfig+0x37e>
 8001f94:	e014      	b.n	8001fc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7fe fde7 	bl	8000b68 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7fe fde3 	bl	8000b68 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e09b      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb4:	4b40      	ldr	r3, [pc, #256]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1ee      	bne.n	8001f9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fc0:	7dfb      	ldrb	r3, [r7, #23]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d105      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc6:	4b3c      	ldr	r3, [pc, #240]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	4a3b      	ldr	r2, [pc, #236]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 8087 	beq.w	80020ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fdc:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d061      	beq.n	80020ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d146      	bne.n	800207e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff0:	4b33      	ldr	r3, [pc, #204]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff6:	f7fe fdb7 	bl	8000b68 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7fe fdb3 	bl	8000b68 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e06d      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002010:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f0      	bne.n	8001ffe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002024:	d108      	bne.n	8002038 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4921      	ldr	r1, [pc, #132]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002038:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a19      	ldr	r1, [r3, #32]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	430b      	orrs	r3, r1
 800204a:	491b      	ldr	r1, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7fe fd87 	bl	8000b68 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205e:	f7fe fd83 	bl	8000b68 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e03d      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x46a>
 800207c:	e035      	b.n	80020ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_RCC_OscConfig+0x4cc>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7fe fd70 	bl	8000b68 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe fd6c 	bl	8000b68 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e026      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x498>
 80020aa:	e01e      	b.n	80020ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e019      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40007000 	.word	0x40007000
 80020c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_RCC_OscConfig+0x500>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000

080020f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0d0      	b.n	80022ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800210c:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d910      	bls.n	800213c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b67      	ldr	r3, [pc, #412]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0207 	bic.w	r2, r3, #7
 8002122:	4965      	ldr	r1, [pc, #404]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b63      	ldr	r3, [pc, #396]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0b8      	b.n	80022ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d020      	beq.n	800218a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002154:	4b59      	ldr	r3, [pc, #356]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4a58      	ldr	r2, [pc, #352]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800215e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800216c:	4b53      	ldr	r3, [pc, #332]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a52      	ldr	r2, [pc, #328]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002176:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002178:	4b50      	ldr	r3, [pc, #320]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	494d      	ldr	r1, [pc, #308]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	4313      	orrs	r3, r2
 8002188:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d040      	beq.n	8002218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b47      	ldr	r3, [pc, #284]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d115      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e07f      	b.n	80022ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b6:	4b41      	ldr	r3, [pc, #260]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e073      	b.n	80022ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e06b      	b.n	80022ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d6:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f023 0203 	bic.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4936      	ldr	r1, [pc, #216]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e8:	f7fe fcbe 	bl	8000b68 <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f0:	f7fe fcba 	bl	8000b68 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e053      	b.n	80022ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002206:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 020c 	and.w	r2, r3, #12
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	429a      	cmp	r2, r3
 8002216:	d1eb      	bne.n	80021f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002218:	4b27      	ldr	r3, [pc, #156]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d210      	bcs.n	8002248 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 0207 	bic.w	r2, r3, #7
 800222e:	4922      	ldr	r1, [pc, #136]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e032      	b.n	80022ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4916      	ldr	r1, [pc, #88]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d009      	beq.n	8002286 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	490e      	ldr	r1, [pc, #56]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002286:	f000 f821 	bl	80022cc <HAL_RCC_GetSysClockFreq>
 800228a:	4602      	mov	r2, r0
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	490a      	ldr	r1, [pc, #40]	; (80022c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002298:	5ccb      	ldrb	r3, [r1, r3]
 800229a:	fa22 f303 	lsr.w	r3, r2, r3
 800229e:	4a09      	ldr	r2, [pc, #36]	; (80022c4 <HAL_RCC_ClockConfig+0x1cc>)
 80022a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_RCC_ClockConfig+0x1d0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fc1c 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40022000 	.word	0x40022000
 80022bc:	40021000 	.word	0x40021000
 80022c0:	08003f0c 	.word	0x08003f0c
 80022c4:	20000000 	.word	0x20000000
 80022c8:	20000004 	.word	0x20000004

080022cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022e6:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_RCC_GetSysClockFreq+0x94>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d002      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x30>
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d003      	beq.n	8002302 <HAL_RCC_GetSysClockFreq+0x36>
 80022fa:	e027      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <HAL_RCC_GetSysClockFreq+0x98>)
 80022fe:	613b      	str	r3, [r7, #16]
      break;
 8002300:	e027      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	0c9b      	lsrs	r3, r3, #18
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	4a17      	ldr	r2, [pc, #92]	; (8002368 <HAL_RCC_GetSysClockFreq+0x9c>)
 800230c:	5cd3      	ldrb	r3, [r2, r3]
 800230e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d010      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_RCC_GetSysClockFreq+0x94>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	0c5b      	lsrs	r3, r3, #17
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	4a11      	ldr	r2, [pc, #68]	; (800236c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002326:	5cd3      	ldrb	r3, [r2, r3]
 8002328:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a0d      	ldr	r2, [pc, #52]	; (8002364 <HAL_RCC_GetSysClockFreq+0x98>)
 800232e:	fb03 f202 	mul.w	r2, r3, r2
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	fbb2 f3f3 	udiv	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e004      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002340:	fb02 f303 	mul.w	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	613b      	str	r3, [r7, #16]
      break;
 800234a:	e002      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_RCC_GetSysClockFreq+0x98>)
 800234e:	613b      	str	r3, [r7, #16]
      break;
 8002350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002352:	693b      	ldr	r3, [r7, #16]
}
 8002354:	4618      	mov	r0, r3
 8002356:	371c      	adds	r7, #28
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	007a1200 	.word	0x007a1200
 8002368:	08003f24 	.word	0x08003f24
 800236c:	08003f34 	.word	0x08003f34
 8002370:	003d0900 	.word	0x003d0900

08002374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002378:	4b02      	ldr	r3, [pc, #8]	; (8002384 <HAL_RCC_GetHCLKFreq+0x10>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	20000000 	.word	0x20000000

08002388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800238c:	f7ff fff2 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4903      	ldr	r1, [pc, #12]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021000 	.word	0x40021000
 80023ac:	08003f1c 	.word	0x08003f1c

080023b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023b4:	f7ff ffde 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	0adb      	lsrs	r3, r3, #11
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4903      	ldr	r1, [pc, #12]	; (80023d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	08003f1c 	.word	0x08003f1c

080023d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <RCC_Delay+0x34>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <RCC_Delay+0x38>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	0a5b      	lsrs	r3, r3, #9
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023f4:	bf00      	nop
  }
  while (Delay --);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1e5a      	subs	r2, r3, #1
 80023fa:	60fa      	str	r2, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f9      	bne.n	80023f4 <RCC_Delay+0x1c>
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	20000000 	.word	0x20000000
 8002410:	10624dd3 	.word	0x10624dd3

08002414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e041      	b.n	80024aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7fe f9c2 	bl	80007c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3304      	adds	r3, #4
 8002450:	4619      	mov	r1, r3
 8002452:	4610      	mov	r0, r2
 8002454:	f000 fa74 	bl	8002940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d001      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e03a      	b.n	8002542 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a18      	ldr	r2, [pc, #96]	; (800254c <HAL_TIM_Base_Start_IT+0x98>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00e      	beq.n	800250c <HAL_TIM_Base_Start_IT+0x58>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f6:	d009      	beq.n	800250c <HAL_TIM_Base_Start_IT+0x58>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <HAL_TIM_Base_Start_IT+0x9c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d004      	beq.n	800250c <HAL_TIM_Base_Start_IT+0x58>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a13      	ldr	r2, [pc, #76]	; (8002554 <HAL_TIM_Base_Start_IT+0xa0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d111      	bne.n	8002530 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b06      	cmp	r3, #6
 800251c:	d010      	beq.n	8002540 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252e:	e007      	b.n	8002540 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	40012c00 	.word	0x40012c00
 8002550:	40000400 	.word	0x40000400
 8002554:	40000800 	.word	0x40000800

08002558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b02      	cmp	r3, #2
 800256c:	d122      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b02      	cmp	r3, #2
 800257a:	d11b      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0202 	mvn.w	r2, #2
 8002584:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f9b4 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 80025a0:	e005      	b.n	80025ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f9a7 	bl	80028f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f9b6 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d122      	bne.n	8002608 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d11b      	bne.n	8002608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0204 	mvn.w	r2, #4
 80025d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2202      	movs	r2, #2
 80025de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f98a 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 80025f4:	e005      	b.n	8002602 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f97d 	bl	80028f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f98c 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b08      	cmp	r3, #8
 8002614:	d122      	bne.n	800265c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b08      	cmp	r3, #8
 8002622:	d11b      	bne.n	800265c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f06f 0208 	mvn.w	r2, #8
 800262c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2204      	movs	r2, #4
 8002632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f960 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 8002648:	e005      	b.n	8002656 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f953 	bl	80028f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f962 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b10      	cmp	r3, #16
 8002668:	d122      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b10      	cmp	r3, #16
 8002676:	d11b      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0210 	mvn.w	r2, #16
 8002680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2208      	movs	r2, #8
 8002686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f936 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 800269c:	e005      	b.n	80026aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f929 	bl	80028f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f938 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d10e      	bne.n	80026dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d107      	bne.n	80026dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0201 	mvn.w	r2, #1
 80026d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fd fdc4 	bl	8000264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e6:	2b80      	cmp	r3, #128	; 0x80
 80026e8:	d10e      	bne.n	8002708 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f4:	2b80      	cmp	r3, #128	; 0x80
 80026f6:	d107      	bne.n	8002708 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fa7b 	bl	8002bfe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002712:	2b40      	cmp	r3, #64	; 0x40
 8002714:	d10e      	bne.n	8002734 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002720:	2b40      	cmp	r3, #64	; 0x40
 8002722:	d107      	bne.n	8002734 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800272c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8fc 	bl	800292c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b20      	cmp	r3, #32
 8002740:	d10e      	bne.n	8002760 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b20      	cmp	r3, #32
 800274e:	d107      	bne.n	8002760 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0220 	mvn.w	r2, #32
 8002758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fa46 	bl	8002bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_TIM_ConfigClockSource+0x1c>
 8002780:	2302      	movs	r3, #2
 8002782:	e0b4      	b.n	80028ee <HAL_TIM_ConfigClockSource+0x186>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027bc:	d03e      	beq.n	800283c <HAL_TIM_ConfigClockSource+0xd4>
 80027be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c2:	f200 8087 	bhi.w	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ca:	f000 8086 	beq.w	80028da <HAL_TIM_ConfigClockSource+0x172>
 80027ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d2:	d87f      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b70      	cmp	r3, #112	; 0x70
 80027d6:	d01a      	beq.n	800280e <HAL_TIM_ConfigClockSource+0xa6>
 80027d8:	2b70      	cmp	r3, #112	; 0x70
 80027da:	d87b      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027dc:	2b60      	cmp	r3, #96	; 0x60
 80027de:	d050      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x11a>
 80027e0:	2b60      	cmp	r3, #96	; 0x60
 80027e2:	d877      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027e4:	2b50      	cmp	r3, #80	; 0x50
 80027e6:	d03c      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0xfa>
 80027e8:	2b50      	cmp	r3, #80	; 0x50
 80027ea:	d873      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027ec:	2b40      	cmp	r3, #64	; 0x40
 80027ee:	d058      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x13a>
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	d86f      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027f4:	2b30      	cmp	r3, #48	; 0x30
 80027f6:	d064      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x15a>
 80027f8:	2b30      	cmp	r3, #48	; 0x30
 80027fa:	d86b      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d060      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002800:	2b20      	cmp	r3, #32
 8002802:	d867      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002804:	2b00      	cmp	r3, #0
 8002806:	d05c      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002808:	2b10      	cmp	r3, #16
 800280a:	d05a      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x15a>
 800280c:	e062      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800281e:	f000 f968 	bl	8002af2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	609a      	str	r2, [r3, #8]
      break;
 800283a:	e04f      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800284c:	f000 f951 	bl	8002af2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800285e:	609a      	str	r2, [r3, #8]
      break;
 8002860:	e03c      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800286e:	461a      	mov	r2, r3
 8002870:	f000 f8c8 	bl	8002a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2150      	movs	r1, #80	; 0x50
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f91f 	bl	8002abe <TIM_ITRx_SetConfig>
      break;
 8002880:	e02c      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800288e:	461a      	mov	r2, r3
 8002890:	f000 f8e6 	bl	8002a60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2160      	movs	r1, #96	; 0x60
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f90f 	bl	8002abe <TIM_ITRx_SetConfig>
      break;
 80028a0:	e01c      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ae:	461a      	mov	r2, r3
 80028b0:	f000 f8a8 	bl	8002a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2140      	movs	r1, #64	; 0x40
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f8ff 	bl	8002abe <TIM_ITRx_SetConfig>
      break;
 80028c0:	e00c      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4619      	mov	r1, r3
 80028cc:	4610      	mov	r0, r2
 80028ce:	f000 f8f6 	bl	8002abe <TIM_ITRx_SetConfig>
      break;
 80028d2:	e003      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
      break;
 80028d8:	e000      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
	...

08002940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a29      	ldr	r2, [pc, #164]	; (80029f8 <TIM_Base_SetConfig+0xb8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00b      	beq.n	8002970 <TIM_Base_SetConfig+0x30>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295e:	d007      	beq.n	8002970 <TIM_Base_SetConfig+0x30>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a26      	ldr	r2, [pc, #152]	; (80029fc <TIM_Base_SetConfig+0xbc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d003      	beq.n	8002970 <TIM_Base_SetConfig+0x30>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a25      	ldr	r2, [pc, #148]	; (8002a00 <TIM_Base_SetConfig+0xc0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d108      	bne.n	8002982 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <TIM_Base_SetConfig+0xb8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00b      	beq.n	80029a2 <TIM_Base_SetConfig+0x62>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002990:	d007      	beq.n	80029a2 <TIM_Base_SetConfig+0x62>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a19      	ldr	r2, [pc, #100]	; (80029fc <TIM_Base_SetConfig+0xbc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d003      	beq.n	80029a2 <TIM_Base_SetConfig+0x62>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <TIM_Base_SetConfig+0xc0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d108      	bne.n	80029b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <TIM_Base_SetConfig+0xb8>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d103      	bne.n	80029e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	615a      	str	r2, [r3, #20]
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	40012c00 	.word	0x40012c00
 80029fc:	40000400 	.word	0x40000400
 8002a00:	40000800 	.word	0x40000800

08002a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	f023 0201 	bic.w	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f023 030a 	bic.w	r3, r3, #10
 8002a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	621a      	str	r2, [r3, #32]
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f023 0210 	bic.w	r2, r3, #16
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	031b      	lsls	r3, r3, #12
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	621a      	str	r2, [r3, #32]
}
 8002ab4:	bf00      	nop
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f043 0307 	orr.w	r3, r3, #7
 8002ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	609a      	str	r2, [r3, #8]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr

08002af2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b087      	sub	sp, #28
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	021a      	lsls	r2, r3, #8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	609a      	str	r2, [r3, #8]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e046      	b.n	8002bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a16      	ldr	r2, [pc, #88]	; (8002be0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00e      	beq.n	8002baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b94:	d009      	beq.n	8002baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a12      	ldr	r2, [pc, #72]	; (8002be4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d004      	beq.n	8002baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	40012c00 	.word	0x40012c00
 8002be4:	40000400 	.word	0x40000400
 8002be8:	40000800 	.word	0x40000800

08002bec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e042      	b.n	8002ca8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fd fdea 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2224      	movs	r2, #36	; 0x24
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f91d 	bl	8002e94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d16d      	bne.n	8002dac <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_UART_Transmit+0x2c>
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e066      	b.n	8002dae <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2221      	movs	r2, #33	; 0x21
 8002cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cee:	f7fd ff3b 	bl	8000b68 <HAL_GetTick>
 8002cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	88fa      	ldrh	r2, [r7, #6]
 8002cf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	88fa      	ldrh	r2, [r7, #6]
 8002cfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d08:	d108      	bne.n	8002d1c <HAL_UART_Transmit+0x6c>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d104      	bne.n	8002d1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	e003      	b.n	8002d24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d24:	e02a      	b.n	8002d7c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2180      	movs	r1, #128	; 0x80
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f840 	bl	8002db6 <UART_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e036      	b.n	8002dae <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10b      	bne.n	8002d5e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	3302      	adds	r3, #2
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	e007      	b.n	8002d6e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1cf      	bne.n	8002d26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2140      	movs	r1, #64	; 0x40
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f810 	bl	8002db6 <UART_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e006      	b.n	8002dae <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e000      	b.n	8002dae <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b090      	sub	sp, #64	; 0x40
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	603b      	str	r3, [r7, #0]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc6:	e050      	b.n	8002e6a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dce:	d04c      	beq.n	8002e6a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d007      	beq.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dd6:	f7fd fec7 	bl	8000b68 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d241      	bcs.n	8002e6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	330c      	adds	r3, #12
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	e853 3f00 	ldrex	r3, [r3]
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e06:	637a      	str	r2, [r7, #52]	; 0x34
 8002e08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e0e:	e841 2300 	strex	r3, r2, [r1]
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1e5      	bne.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3314      	adds	r3, #20
 8002e20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	e853 3f00 	ldrex	r3, [r3]
 8002e28:	613b      	str	r3, [r7, #16]
   return(result);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3314      	adds	r3, #20
 8002e38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e3a:	623a      	str	r2, [r7, #32]
 8002e3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3e:	69f9      	ldr	r1, [r7, #28]
 8002e40:	6a3a      	ldr	r2, [r7, #32]
 8002e42:	e841 2300 	strex	r3, r2, [r1]
 8002e46:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1e5      	bne.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e00f      	b.n	8002e8a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4013      	ands	r3, r2
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	bf0c      	ite	eq
 8002e7a:	2301      	moveq	r3, #1
 8002e7c:	2300      	movne	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d09f      	beq.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3740      	adds	r7, #64	; 0x40
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ece:	f023 030c 	bic.w	r3, r3, #12
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <UART_SetConfig+0x114>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d103      	bne.n	8002f04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002efc:	f7ff fa58 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	e002      	b.n	8002f0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f04:	f7ff fa40 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8002f08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	009a      	lsls	r2, r3, #2
 8002f14:	441a      	add	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f20:	4a22      	ldr	r2, [pc, #136]	; (8002fac <UART_SetConfig+0x118>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	0119      	lsls	r1, r3, #4
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	009a      	lsls	r2, r3, #2
 8002f34:	441a      	add	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <UART_SetConfig+0x118>)
 8002f42:	fba3 0302 	umull	r0, r3, r3, r2
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	2064      	movs	r0, #100	; 0x64
 8002f4a:	fb00 f303 	mul.w	r3, r0, r3
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	3332      	adds	r3, #50	; 0x32
 8002f54:	4a15      	ldr	r2, [pc, #84]	; (8002fac <UART_SetConfig+0x118>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f60:	4419      	add	r1, r3
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	009a      	lsls	r2, r3, #2
 8002f6c:	441a      	add	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <UART_SetConfig+0x118>)
 8002f7a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2064      	movs	r0, #100	; 0x64
 8002f82:	fb00 f303 	mul.w	r3, r0, r3
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	3332      	adds	r3, #50	; 0x32
 8002f8c:	4a07      	ldr	r2, [pc, #28]	; (8002fac <UART_SetConfig+0x118>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	f003 020f 	and.w	r2, r3, #15
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	440a      	add	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40013800 	.word	0x40013800
 8002fac:	51eb851f 	.word	0x51eb851f

08002fb0 <std>:
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	b510      	push	{r4, lr}
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8002fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fbe:	6083      	str	r3, [r0, #8]
 8002fc0:	8181      	strh	r1, [r0, #12]
 8002fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8002fc4:	81c2      	strh	r2, [r0, #14]
 8002fc6:	6183      	str	r3, [r0, #24]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	2208      	movs	r2, #8
 8002fcc:	305c      	adds	r0, #92	; 0x5c
 8002fce:	f000 f9f7 	bl	80033c0 <memset>
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <std+0x58>)
 8002fd4:	6224      	str	r4, [r4, #32]
 8002fd6:	6263      	str	r3, [r4, #36]	; 0x24
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <std+0x5c>)
 8002fda:	62a3      	str	r3, [r4, #40]	; 0x28
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <std+0x60>)
 8002fde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <std+0x64>)
 8002fe2:	6323      	str	r3, [r4, #48]	; 0x30
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <std+0x68>)
 8002fe6:	429c      	cmp	r4, r3
 8002fe8:	d006      	beq.n	8002ff8 <std+0x48>
 8002fea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002fee:	4294      	cmp	r4, r2
 8002ff0:	d002      	beq.n	8002ff8 <std+0x48>
 8002ff2:	33d0      	adds	r3, #208	; 0xd0
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	d105      	bne.n	8003004 <std+0x54>
 8002ff8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003000:	f000 ba56 	b.w	80034b0 <__retarget_lock_init_recursive>
 8003004:	bd10      	pop	{r4, pc}
 8003006:	bf00      	nop
 8003008:	08003211 	.word	0x08003211
 800300c:	08003233 	.word	0x08003233
 8003010:	0800326b 	.word	0x0800326b
 8003014:	0800328f 	.word	0x0800328f
 8003018:	20000190 	.word	0x20000190

0800301c <stdio_exit_handler>:
 800301c:	4a02      	ldr	r2, [pc, #8]	; (8003028 <stdio_exit_handler+0xc>)
 800301e:	4903      	ldr	r1, [pc, #12]	; (800302c <stdio_exit_handler+0x10>)
 8003020:	4803      	ldr	r0, [pc, #12]	; (8003030 <stdio_exit_handler+0x14>)
 8003022:	f000 b869 	b.w	80030f8 <_fwalk_sglue>
 8003026:	bf00      	nop
 8003028:	2000000c 	.word	0x2000000c
 800302c:	08003d51 	.word	0x08003d51
 8003030:	20000018 	.word	0x20000018

08003034 <cleanup_stdio>:
 8003034:	6841      	ldr	r1, [r0, #4]
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <cleanup_stdio+0x34>)
 8003038:	b510      	push	{r4, lr}
 800303a:	4299      	cmp	r1, r3
 800303c:	4604      	mov	r4, r0
 800303e:	d001      	beq.n	8003044 <cleanup_stdio+0x10>
 8003040:	f000 fe86 	bl	8003d50 <_fflush_r>
 8003044:	68a1      	ldr	r1, [r4, #8]
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <cleanup_stdio+0x38>)
 8003048:	4299      	cmp	r1, r3
 800304a:	d002      	beq.n	8003052 <cleanup_stdio+0x1e>
 800304c:	4620      	mov	r0, r4
 800304e:	f000 fe7f 	bl	8003d50 <_fflush_r>
 8003052:	68e1      	ldr	r1, [r4, #12]
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <cleanup_stdio+0x3c>)
 8003056:	4299      	cmp	r1, r3
 8003058:	d004      	beq.n	8003064 <cleanup_stdio+0x30>
 800305a:	4620      	mov	r0, r4
 800305c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003060:	f000 be76 	b.w	8003d50 <_fflush_r>
 8003064:	bd10      	pop	{r4, pc}
 8003066:	bf00      	nop
 8003068:	20000190 	.word	0x20000190
 800306c:	200001f8 	.word	0x200001f8
 8003070:	20000260 	.word	0x20000260

08003074 <global_stdio_init.part.0>:
 8003074:	b510      	push	{r4, lr}
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <global_stdio_init.part.0+0x30>)
 8003078:	4c0b      	ldr	r4, [pc, #44]	; (80030a8 <global_stdio_init.part.0+0x34>)
 800307a:	4a0c      	ldr	r2, [pc, #48]	; (80030ac <global_stdio_init.part.0+0x38>)
 800307c:	4620      	mov	r0, r4
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	2104      	movs	r1, #4
 8003082:	2200      	movs	r2, #0
 8003084:	f7ff ff94 	bl	8002fb0 <std>
 8003088:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800308c:	2201      	movs	r2, #1
 800308e:	2109      	movs	r1, #9
 8003090:	f7ff ff8e 	bl	8002fb0 <std>
 8003094:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003098:	2202      	movs	r2, #2
 800309a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800309e:	2112      	movs	r1, #18
 80030a0:	f7ff bf86 	b.w	8002fb0 <std>
 80030a4:	200002c8 	.word	0x200002c8
 80030a8:	20000190 	.word	0x20000190
 80030ac:	0800301d 	.word	0x0800301d

080030b0 <__sfp_lock_acquire>:
 80030b0:	4801      	ldr	r0, [pc, #4]	; (80030b8 <__sfp_lock_acquire+0x8>)
 80030b2:	f000 b9fe 	b.w	80034b2 <__retarget_lock_acquire_recursive>
 80030b6:	bf00      	nop
 80030b8:	200002d1 	.word	0x200002d1

080030bc <__sfp_lock_release>:
 80030bc:	4801      	ldr	r0, [pc, #4]	; (80030c4 <__sfp_lock_release+0x8>)
 80030be:	f000 b9f9 	b.w	80034b4 <__retarget_lock_release_recursive>
 80030c2:	bf00      	nop
 80030c4:	200002d1 	.word	0x200002d1

080030c8 <__sinit>:
 80030c8:	b510      	push	{r4, lr}
 80030ca:	4604      	mov	r4, r0
 80030cc:	f7ff fff0 	bl	80030b0 <__sfp_lock_acquire>
 80030d0:	6a23      	ldr	r3, [r4, #32]
 80030d2:	b11b      	cbz	r3, 80030dc <__sinit+0x14>
 80030d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030d8:	f7ff bff0 	b.w	80030bc <__sfp_lock_release>
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <__sinit+0x28>)
 80030de:	6223      	str	r3, [r4, #32]
 80030e0:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <__sinit+0x2c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f5      	bne.n	80030d4 <__sinit+0xc>
 80030e8:	f7ff ffc4 	bl	8003074 <global_stdio_init.part.0>
 80030ec:	e7f2      	b.n	80030d4 <__sinit+0xc>
 80030ee:	bf00      	nop
 80030f0:	08003035 	.word	0x08003035
 80030f4:	200002c8 	.word	0x200002c8

080030f8 <_fwalk_sglue>:
 80030f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030fc:	4607      	mov	r7, r0
 80030fe:	4688      	mov	r8, r1
 8003100:	4614      	mov	r4, r2
 8003102:	2600      	movs	r6, #0
 8003104:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003108:	f1b9 0901 	subs.w	r9, r9, #1
 800310c:	d505      	bpl.n	800311a <_fwalk_sglue+0x22>
 800310e:	6824      	ldr	r4, [r4, #0]
 8003110:	2c00      	cmp	r4, #0
 8003112:	d1f7      	bne.n	8003104 <_fwalk_sglue+0xc>
 8003114:	4630      	mov	r0, r6
 8003116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800311a:	89ab      	ldrh	r3, [r5, #12]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d907      	bls.n	8003130 <_fwalk_sglue+0x38>
 8003120:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003124:	3301      	adds	r3, #1
 8003126:	d003      	beq.n	8003130 <_fwalk_sglue+0x38>
 8003128:	4629      	mov	r1, r5
 800312a:	4638      	mov	r0, r7
 800312c:	47c0      	blx	r8
 800312e:	4306      	orrs	r6, r0
 8003130:	3568      	adds	r5, #104	; 0x68
 8003132:	e7e9      	b.n	8003108 <_fwalk_sglue+0x10>

08003134 <iprintf>:
 8003134:	b40f      	push	{r0, r1, r2, r3}
 8003136:	b507      	push	{r0, r1, r2, lr}
 8003138:	4906      	ldr	r1, [pc, #24]	; (8003154 <iprintf+0x20>)
 800313a:	ab04      	add	r3, sp, #16
 800313c:	6808      	ldr	r0, [r1, #0]
 800313e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003142:	6881      	ldr	r1, [r0, #8]
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	f000 fad3 	bl	80036f0 <_vfiprintf_r>
 800314a:	b003      	add	sp, #12
 800314c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003150:	b004      	add	sp, #16
 8003152:	4770      	bx	lr
 8003154:	20000064 	.word	0x20000064

08003158 <_puts_r>:
 8003158:	6a03      	ldr	r3, [r0, #32]
 800315a:	b570      	push	{r4, r5, r6, lr}
 800315c:	4605      	mov	r5, r0
 800315e:	460e      	mov	r6, r1
 8003160:	6884      	ldr	r4, [r0, #8]
 8003162:	b90b      	cbnz	r3, 8003168 <_puts_r+0x10>
 8003164:	f7ff ffb0 	bl	80030c8 <__sinit>
 8003168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800316a:	07db      	lsls	r3, r3, #31
 800316c:	d405      	bmi.n	800317a <_puts_r+0x22>
 800316e:	89a3      	ldrh	r3, [r4, #12]
 8003170:	0598      	lsls	r0, r3, #22
 8003172:	d402      	bmi.n	800317a <_puts_r+0x22>
 8003174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003176:	f000 f99c 	bl	80034b2 <__retarget_lock_acquire_recursive>
 800317a:	89a3      	ldrh	r3, [r4, #12]
 800317c:	0719      	lsls	r1, r3, #28
 800317e:	d513      	bpl.n	80031a8 <_puts_r+0x50>
 8003180:	6923      	ldr	r3, [r4, #16]
 8003182:	b18b      	cbz	r3, 80031a8 <_puts_r+0x50>
 8003184:	3e01      	subs	r6, #1
 8003186:	68a3      	ldr	r3, [r4, #8]
 8003188:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800318c:	3b01      	subs	r3, #1
 800318e:	60a3      	str	r3, [r4, #8]
 8003190:	b9e9      	cbnz	r1, 80031ce <_puts_r+0x76>
 8003192:	2b00      	cmp	r3, #0
 8003194:	da2e      	bge.n	80031f4 <_puts_r+0x9c>
 8003196:	4622      	mov	r2, r4
 8003198:	210a      	movs	r1, #10
 800319a:	4628      	mov	r0, r5
 800319c:	f000 f87b 	bl	8003296 <__swbuf_r>
 80031a0:	3001      	adds	r0, #1
 80031a2:	d007      	beq.n	80031b4 <_puts_r+0x5c>
 80031a4:	250a      	movs	r5, #10
 80031a6:	e007      	b.n	80031b8 <_puts_r+0x60>
 80031a8:	4621      	mov	r1, r4
 80031aa:	4628      	mov	r0, r5
 80031ac:	f000 f8b0 	bl	8003310 <__swsetup_r>
 80031b0:	2800      	cmp	r0, #0
 80031b2:	d0e7      	beq.n	8003184 <_puts_r+0x2c>
 80031b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80031b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031ba:	07da      	lsls	r2, r3, #31
 80031bc:	d405      	bmi.n	80031ca <_puts_r+0x72>
 80031be:	89a3      	ldrh	r3, [r4, #12]
 80031c0:	059b      	lsls	r3, r3, #22
 80031c2:	d402      	bmi.n	80031ca <_puts_r+0x72>
 80031c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031c6:	f000 f975 	bl	80034b4 <__retarget_lock_release_recursive>
 80031ca:	4628      	mov	r0, r5
 80031cc:	bd70      	pop	{r4, r5, r6, pc}
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	da04      	bge.n	80031dc <_puts_r+0x84>
 80031d2:	69a2      	ldr	r2, [r4, #24]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	dc06      	bgt.n	80031e6 <_puts_r+0x8e>
 80031d8:	290a      	cmp	r1, #10
 80031da:	d004      	beq.n	80031e6 <_puts_r+0x8e>
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	6022      	str	r2, [r4, #0]
 80031e2:	7019      	strb	r1, [r3, #0]
 80031e4:	e7cf      	b.n	8003186 <_puts_r+0x2e>
 80031e6:	4622      	mov	r2, r4
 80031e8:	4628      	mov	r0, r5
 80031ea:	f000 f854 	bl	8003296 <__swbuf_r>
 80031ee:	3001      	adds	r0, #1
 80031f0:	d1c9      	bne.n	8003186 <_puts_r+0x2e>
 80031f2:	e7df      	b.n	80031b4 <_puts_r+0x5c>
 80031f4:	250a      	movs	r5, #10
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	6022      	str	r2, [r4, #0]
 80031fc:	701d      	strb	r5, [r3, #0]
 80031fe:	e7db      	b.n	80031b8 <_puts_r+0x60>

08003200 <puts>:
 8003200:	4b02      	ldr	r3, [pc, #8]	; (800320c <puts+0xc>)
 8003202:	4601      	mov	r1, r0
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	f7ff bfa7 	b.w	8003158 <_puts_r>
 800320a:	bf00      	nop
 800320c:	20000064 	.word	0x20000064

08003210 <__sread>:
 8003210:	b510      	push	{r4, lr}
 8003212:	460c      	mov	r4, r1
 8003214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003218:	f000 f8fc 	bl	8003414 <_read_r>
 800321c:	2800      	cmp	r0, #0
 800321e:	bfab      	itete	ge
 8003220:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003222:	89a3      	ldrhlt	r3, [r4, #12]
 8003224:	181b      	addge	r3, r3, r0
 8003226:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800322a:	bfac      	ite	ge
 800322c:	6563      	strge	r3, [r4, #84]	; 0x54
 800322e:	81a3      	strhlt	r3, [r4, #12]
 8003230:	bd10      	pop	{r4, pc}

08003232 <__swrite>:
 8003232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003236:	461f      	mov	r7, r3
 8003238:	898b      	ldrh	r3, [r1, #12]
 800323a:	4605      	mov	r5, r0
 800323c:	05db      	lsls	r3, r3, #23
 800323e:	460c      	mov	r4, r1
 8003240:	4616      	mov	r6, r2
 8003242:	d505      	bpl.n	8003250 <__swrite+0x1e>
 8003244:	2302      	movs	r3, #2
 8003246:	2200      	movs	r2, #0
 8003248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800324c:	f000 f8d0 	bl	80033f0 <_lseek_r>
 8003250:	89a3      	ldrh	r3, [r4, #12]
 8003252:	4632      	mov	r2, r6
 8003254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003258:	81a3      	strh	r3, [r4, #12]
 800325a:	4628      	mov	r0, r5
 800325c:	463b      	mov	r3, r7
 800325e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003266:	f000 b8e7 	b.w	8003438 <_write_r>

0800326a <__sseek>:
 800326a:	b510      	push	{r4, lr}
 800326c:	460c      	mov	r4, r1
 800326e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003272:	f000 f8bd 	bl	80033f0 <_lseek_r>
 8003276:	1c43      	adds	r3, r0, #1
 8003278:	89a3      	ldrh	r3, [r4, #12]
 800327a:	bf15      	itete	ne
 800327c:	6560      	strne	r0, [r4, #84]	; 0x54
 800327e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003282:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003286:	81a3      	strheq	r3, [r4, #12]
 8003288:	bf18      	it	ne
 800328a:	81a3      	strhne	r3, [r4, #12]
 800328c:	bd10      	pop	{r4, pc}

0800328e <__sclose>:
 800328e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003292:	f000 b89d 	b.w	80033d0 <_close_r>

08003296 <__swbuf_r>:
 8003296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003298:	460e      	mov	r6, r1
 800329a:	4614      	mov	r4, r2
 800329c:	4605      	mov	r5, r0
 800329e:	b118      	cbz	r0, 80032a8 <__swbuf_r+0x12>
 80032a0:	6a03      	ldr	r3, [r0, #32]
 80032a2:	b90b      	cbnz	r3, 80032a8 <__swbuf_r+0x12>
 80032a4:	f7ff ff10 	bl	80030c8 <__sinit>
 80032a8:	69a3      	ldr	r3, [r4, #24]
 80032aa:	60a3      	str	r3, [r4, #8]
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	071a      	lsls	r2, r3, #28
 80032b0:	d525      	bpl.n	80032fe <__swbuf_r+0x68>
 80032b2:	6923      	ldr	r3, [r4, #16]
 80032b4:	b31b      	cbz	r3, 80032fe <__swbuf_r+0x68>
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	6922      	ldr	r2, [r4, #16]
 80032ba:	b2f6      	uxtb	r6, r6
 80032bc:	1a98      	subs	r0, r3, r2
 80032be:	6963      	ldr	r3, [r4, #20]
 80032c0:	4637      	mov	r7, r6
 80032c2:	4283      	cmp	r3, r0
 80032c4:	dc04      	bgt.n	80032d0 <__swbuf_r+0x3a>
 80032c6:	4621      	mov	r1, r4
 80032c8:	4628      	mov	r0, r5
 80032ca:	f000 fd41 	bl	8003d50 <_fflush_r>
 80032ce:	b9e0      	cbnz	r0, 800330a <__swbuf_r+0x74>
 80032d0:	68a3      	ldr	r3, [r4, #8]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	60a3      	str	r3, [r4, #8]
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	6022      	str	r2, [r4, #0]
 80032dc:	701e      	strb	r6, [r3, #0]
 80032de:	6962      	ldr	r2, [r4, #20]
 80032e0:	1c43      	adds	r3, r0, #1
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d004      	beq.n	80032f0 <__swbuf_r+0x5a>
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	07db      	lsls	r3, r3, #31
 80032ea:	d506      	bpl.n	80032fa <__swbuf_r+0x64>
 80032ec:	2e0a      	cmp	r6, #10
 80032ee:	d104      	bne.n	80032fa <__swbuf_r+0x64>
 80032f0:	4621      	mov	r1, r4
 80032f2:	4628      	mov	r0, r5
 80032f4:	f000 fd2c 	bl	8003d50 <_fflush_r>
 80032f8:	b938      	cbnz	r0, 800330a <__swbuf_r+0x74>
 80032fa:	4638      	mov	r0, r7
 80032fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032fe:	4621      	mov	r1, r4
 8003300:	4628      	mov	r0, r5
 8003302:	f000 f805 	bl	8003310 <__swsetup_r>
 8003306:	2800      	cmp	r0, #0
 8003308:	d0d5      	beq.n	80032b6 <__swbuf_r+0x20>
 800330a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800330e:	e7f4      	b.n	80032fa <__swbuf_r+0x64>

08003310 <__swsetup_r>:
 8003310:	b538      	push	{r3, r4, r5, lr}
 8003312:	4b2a      	ldr	r3, [pc, #168]	; (80033bc <__swsetup_r+0xac>)
 8003314:	4605      	mov	r5, r0
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	460c      	mov	r4, r1
 800331a:	b118      	cbz	r0, 8003324 <__swsetup_r+0x14>
 800331c:	6a03      	ldr	r3, [r0, #32]
 800331e:	b90b      	cbnz	r3, 8003324 <__swsetup_r+0x14>
 8003320:	f7ff fed2 	bl	80030c8 <__sinit>
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800332a:	0718      	lsls	r0, r3, #28
 800332c:	d422      	bmi.n	8003374 <__swsetup_r+0x64>
 800332e:	06d9      	lsls	r1, r3, #27
 8003330:	d407      	bmi.n	8003342 <__swsetup_r+0x32>
 8003332:	2309      	movs	r3, #9
 8003334:	602b      	str	r3, [r5, #0]
 8003336:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800333a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800333e:	81a3      	strh	r3, [r4, #12]
 8003340:	e034      	b.n	80033ac <__swsetup_r+0x9c>
 8003342:	0758      	lsls	r0, r3, #29
 8003344:	d512      	bpl.n	800336c <__swsetup_r+0x5c>
 8003346:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003348:	b141      	cbz	r1, 800335c <__swsetup_r+0x4c>
 800334a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800334e:	4299      	cmp	r1, r3
 8003350:	d002      	beq.n	8003358 <__swsetup_r+0x48>
 8003352:	4628      	mov	r0, r5
 8003354:	f000 f8b0 	bl	80034b8 <_free_r>
 8003358:	2300      	movs	r3, #0
 800335a:	6363      	str	r3, [r4, #52]	; 0x34
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003362:	81a3      	strh	r3, [r4, #12]
 8003364:	2300      	movs	r3, #0
 8003366:	6063      	str	r3, [r4, #4]
 8003368:	6923      	ldr	r3, [r4, #16]
 800336a:	6023      	str	r3, [r4, #0]
 800336c:	89a3      	ldrh	r3, [r4, #12]
 800336e:	f043 0308 	orr.w	r3, r3, #8
 8003372:	81a3      	strh	r3, [r4, #12]
 8003374:	6923      	ldr	r3, [r4, #16]
 8003376:	b94b      	cbnz	r3, 800338c <__swsetup_r+0x7c>
 8003378:	89a3      	ldrh	r3, [r4, #12]
 800337a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800337e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003382:	d003      	beq.n	800338c <__swsetup_r+0x7c>
 8003384:	4621      	mov	r1, r4
 8003386:	4628      	mov	r0, r5
 8003388:	f000 fd2f 	bl	8003dea <__smakebuf_r>
 800338c:	89a0      	ldrh	r0, [r4, #12]
 800338e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003392:	f010 0301 	ands.w	r3, r0, #1
 8003396:	d00a      	beq.n	80033ae <__swsetup_r+0x9e>
 8003398:	2300      	movs	r3, #0
 800339a:	60a3      	str	r3, [r4, #8]
 800339c:	6963      	ldr	r3, [r4, #20]
 800339e:	425b      	negs	r3, r3
 80033a0:	61a3      	str	r3, [r4, #24]
 80033a2:	6923      	ldr	r3, [r4, #16]
 80033a4:	b943      	cbnz	r3, 80033b8 <__swsetup_r+0xa8>
 80033a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80033aa:	d1c4      	bne.n	8003336 <__swsetup_r+0x26>
 80033ac:	bd38      	pop	{r3, r4, r5, pc}
 80033ae:	0781      	lsls	r1, r0, #30
 80033b0:	bf58      	it	pl
 80033b2:	6963      	ldrpl	r3, [r4, #20]
 80033b4:	60a3      	str	r3, [r4, #8]
 80033b6:	e7f4      	b.n	80033a2 <__swsetup_r+0x92>
 80033b8:	2000      	movs	r0, #0
 80033ba:	e7f7      	b.n	80033ac <__swsetup_r+0x9c>
 80033bc:	20000064 	.word	0x20000064

080033c0 <memset>:
 80033c0:	4603      	mov	r3, r0
 80033c2:	4402      	add	r2, r0
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d100      	bne.n	80033ca <memset+0xa>
 80033c8:	4770      	bx	lr
 80033ca:	f803 1b01 	strb.w	r1, [r3], #1
 80033ce:	e7f9      	b.n	80033c4 <memset+0x4>

080033d0 <_close_r>:
 80033d0:	b538      	push	{r3, r4, r5, lr}
 80033d2:	2300      	movs	r3, #0
 80033d4:	4d05      	ldr	r5, [pc, #20]	; (80033ec <_close_r+0x1c>)
 80033d6:	4604      	mov	r4, r0
 80033d8:	4608      	mov	r0, r1
 80033da:	602b      	str	r3, [r5, #0]
 80033dc:	f7fd fad9 	bl	8000992 <_close>
 80033e0:	1c43      	adds	r3, r0, #1
 80033e2:	d102      	bne.n	80033ea <_close_r+0x1a>
 80033e4:	682b      	ldr	r3, [r5, #0]
 80033e6:	b103      	cbz	r3, 80033ea <_close_r+0x1a>
 80033e8:	6023      	str	r3, [r4, #0]
 80033ea:	bd38      	pop	{r3, r4, r5, pc}
 80033ec:	200002cc 	.word	0x200002cc

080033f0 <_lseek_r>:
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	4604      	mov	r4, r0
 80033f4:	4608      	mov	r0, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	2200      	movs	r2, #0
 80033fa:	4d05      	ldr	r5, [pc, #20]	; (8003410 <_lseek_r+0x20>)
 80033fc:	602a      	str	r2, [r5, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	f7fd faeb 	bl	80009da <_lseek>
 8003404:	1c43      	adds	r3, r0, #1
 8003406:	d102      	bne.n	800340e <_lseek_r+0x1e>
 8003408:	682b      	ldr	r3, [r5, #0]
 800340a:	b103      	cbz	r3, 800340e <_lseek_r+0x1e>
 800340c:	6023      	str	r3, [r4, #0]
 800340e:	bd38      	pop	{r3, r4, r5, pc}
 8003410:	200002cc 	.word	0x200002cc

08003414 <_read_r>:
 8003414:	b538      	push	{r3, r4, r5, lr}
 8003416:	4604      	mov	r4, r0
 8003418:	4608      	mov	r0, r1
 800341a:	4611      	mov	r1, r2
 800341c:	2200      	movs	r2, #0
 800341e:	4d05      	ldr	r5, [pc, #20]	; (8003434 <_read_r+0x20>)
 8003420:	602a      	str	r2, [r5, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	f7fd fa7c 	bl	8000920 <_read>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	d102      	bne.n	8003432 <_read_r+0x1e>
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	b103      	cbz	r3, 8003432 <_read_r+0x1e>
 8003430:	6023      	str	r3, [r4, #0]
 8003432:	bd38      	pop	{r3, r4, r5, pc}
 8003434:	200002cc 	.word	0x200002cc

08003438 <_write_r>:
 8003438:	b538      	push	{r3, r4, r5, lr}
 800343a:	4604      	mov	r4, r0
 800343c:	4608      	mov	r0, r1
 800343e:	4611      	mov	r1, r2
 8003440:	2200      	movs	r2, #0
 8003442:	4d05      	ldr	r5, [pc, #20]	; (8003458 <_write_r+0x20>)
 8003444:	602a      	str	r2, [r5, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	f7fd fa87 	bl	800095a <_write>
 800344c:	1c43      	adds	r3, r0, #1
 800344e:	d102      	bne.n	8003456 <_write_r+0x1e>
 8003450:	682b      	ldr	r3, [r5, #0]
 8003452:	b103      	cbz	r3, 8003456 <_write_r+0x1e>
 8003454:	6023      	str	r3, [r4, #0]
 8003456:	bd38      	pop	{r3, r4, r5, pc}
 8003458:	200002cc 	.word	0x200002cc

0800345c <__errno>:
 800345c:	4b01      	ldr	r3, [pc, #4]	; (8003464 <__errno+0x8>)
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000064 	.word	0x20000064

08003468 <__libc_init_array>:
 8003468:	b570      	push	{r4, r5, r6, lr}
 800346a:	2600      	movs	r6, #0
 800346c:	4d0c      	ldr	r5, [pc, #48]	; (80034a0 <__libc_init_array+0x38>)
 800346e:	4c0d      	ldr	r4, [pc, #52]	; (80034a4 <__libc_init_array+0x3c>)
 8003470:	1b64      	subs	r4, r4, r5
 8003472:	10a4      	asrs	r4, r4, #2
 8003474:	42a6      	cmp	r6, r4
 8003476:	d109      	bne.n	800348c <__libc_init_array+0x24>
 8003478:	f000 fd34 	bl	8003ee4 <_init>
 800347c:	2600      	movs	r6, #0
 800347e:	4d0a      	ldr	r5, [pc, #40]	; (80034a8 <__libc_init_array+0x40>)
 8003480:	4c0a      	ldr	r4, [pc, #40]	; (80034ac <__libc_init_array+0x44>)
 8003482:	1b64      	subs	r4, r4, r5
 8003484:	10a4      	asrs	r4, r4, #2
 8003486:	42a6      	cmp	r6, r4
 8003488:	d105      	bne.n	8003496 <__libc_init_array+0x2e>
 800348a:	bd70      	pop	{r4, r5, r6, pc}
 800348c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003490:	4798      	blx	r3
 8003492:	3601      	adds	r6, #1
 8003494:	e7ee      	b.n	8003474 <__libc_init_array+0xc>
 8003496:	f855 3b04 	ldr.w	r3, [r5], #4
 800349a:	4798      	blx	r3
 800349c:	3601      	adds	r6, #1
 800349e:	e7f2      	b.n	8003486 <__libc_init_array+0x1e>
 80034a0:	08003f6c 	.word	0x08003f6c
 80034a4:	08003f6c 	.word	0x08003f6c
 80034a8:	08003f6c 	.word	0x08003f6c
 80034ac:	08003f70 	.word	0x08003f70

080034b0 <__retarget_lock_init_recursive>:
 80034b0:	4770      	bx	lr

080034b2 <__retarget_lock_acquire_recursive>:
 80034b2:	4770      	bx	lr

080034b4 <__retarget_lock_release_recursive>:
 80034b4:	4770      	bx	lr
	...

080034b8 <_free_r>:
 80034b8:	b538      	push	{r3, r4, r5, lr}
 80034ba:	4605      	mov	r5, r0
 80034bc:	2900      	cmp	r1, #0
 80034be:	d040      	beq.n	8003542 <_free_r+0x8a>
 80034c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034c4:	1f0c      	subs	r4, r1, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bfb8      	it	lt
 80034ca:	18e4      	addlt	r4, r4, r3
 80034cc:	f000 f8dc 	bl	8003688 <__malloc_lock>
 80034d0:	4a1c      	ldr	r2, [pc, #112]	; (8003544 <_free_r+0x8c>)
 80034d2:	6813      	ldr	r3, [r2, #0]
 80034d4:	b933      	cbnz	r3, 80034e4 <_free_r+0x2c>
 80034d6:	6063      	str	r3, [r4, #4]
 80034d8:	6014      	str	r4, [r2, #0]
 80034da:	4628      	mov	r0, r5
 80034dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034e0:	f000 b8d8 	b.w	8003694 <__malloc_unlock>
 80034e4:	42a3      	cmp	r3, r4
 80034e6:	d908      	bls.n	80034fa <_free_r+0x42>
 80034e8:	6820      	ldr	r0, [r4, #0]
 80034ea:	1821      	adds	r1, r4, r0
 80034ec:	428b      	cmp	r3, r1
 80034ee:	bf01      	itttt	eq
 80034f0:	6819      	ldreq	r1, [r3, #0]
 80034f2:	685b      	ldreq	r3, [r3, #4]
 80034f4:	1809      	addeq	r1, r1, r0
 80034f6:	6021      	streq	r1, [r4, #0]
 80034f8:	e7ed      	b.n	80034d6 <_free_r+0x1e>
 80034fa:	461a      	mov	r2, r3
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	b10b      	cbz	r3, 8003504 <_free_r+0x4c>
 8003500:	42a3      	cmp	r3, r4
 8003502:	d9fa      	bls.n	80034fa <_free_r+0x42>
 8003504:	6811      	ldr	r1, [r2, #0]
 8003506:	1850      	adds	r0, r2, r1
 8003508:	42a0      	cmp	r0, r4
 800350a:	d10b      	bne.n	8003524 <_free_r+0x6c>
 800350c:	6820      	ldr	r0, [r4, #0]
 800350e:	4401      	add	r1, r0
 8003510:	1850      	adds	r0, r2, r1
 8003512:	4283      	cmp	r3, r0
 8003514:	6011      	str	r1, [r2, #0]
 8003516:	d1e0      	bne.n	80034da <_free_r+0x22>
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	4408      	add	r0, r1
 800351e:	6010      	str	r0, [r2, #0]
 8003520:	6053      	str	r3, [r2, #4]
 8003522:	e7da      	b.n	80034da <_free_r+0x22>
 8003524:	d902      	bls.n	800352c <_free_r+0x74>
 8003526:	230c      	movs	r3, #12
 8003528:	602b      	str	r3, [r5, #0]
 800352a:	e7d6      	b.n	80034da <_free_r+0x22>
 800352c:	6820      	ldr	r0, [r4, #0]
 800352e:	1821      	adds	r1, r4, r0
 8003530:	428b      	cmp	r3, r1
 8003532:	bf01      	itttt	eq
 8003534:	6819      	ldreq	r1, [r3, #0]
 8003536:	685b      	ldreq	r3, [r3, #4]
 8003538:	1809      	addeq	r1, r1, r0
 800353a:	6021      	streq	r1, [r4, #0]
 800353c:	6063      	str	r3, [r4, #4]
 800353e:	6054      	str	r4, [r2, #4]
 8003540:	e7cb      	b.n	80034da <_free_r+0x22>
 8003542:	bd38      	pop	{r3, r4, r5, pc}
 8003544:	200002d4 	.word	0x200002d4

08003548 <sbrk_aligned>:
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	4e0e      	ldr	r6, [pc, #56]	; (8003584 <sbrk_aligned+0x3c>)
 800354c:	460c      	mov	r4, r1
 800354e:	6831      	ldr	r1, [r6, #0]
 8003550:	4605      	mov	r5, r0
 8003552:	b911      	cbnz	r1, 800355a <sbrk_aligned+0x12>
 8003554:	f000 fca8 	bl	8003ea8 <_sbrk_r>
 8003558:	6030      	str	r0, [r6, #0]
 800355a:	4621      	mov	r1, r4
 800355c:	4628      	mov	r0, r5
 800355e:	f000 fca3 	bl	8003ea8 <_sbrk_r>
 8003562:	1c43      	adds	r3, r0, #1
 8003564:	d00a      	beq.n	800357c <sbrk_aligned+0x34>
 8003566:	1cc4      	adds	r4, r0, #3
 8003568:	f024 0403 	bic.w	r4, r4, #3
 800356c:	42a0      	cmp	r0, r4
 800356e:	d007      	beq.n	8003580 <sbrk_aligned+0x38>
 8003570:	1a21      	subs	r1, r4, r0
 8003572:	4628      	mov	r0, r5
 8003574:	f000 fc98 	bl	8003ea8 <_sbrk_r>
 8003578:	3001      	adds	r0, #1
 800357a:	d101      	bne.n	8003580 <sbrk_aligned+0x38>
 800357c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003580:	4620      	mov	r0, r4
 8003582:	bd70      	pop	{r4, r5, r6, pc}
 8003584:	200002d8 	.word	0x200002d8

08003588 <_malloc_r>:
 8003588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800358c:	1ccd      	adds	r5, r1, #3
 800358e:	f025 0503 	bic.w	r5, r5, #3
 8003592:	3508      	adds	r5, #8
 8003594:	2d0c      	cmp	r5, #12
 8003596:	bf38      	it	cc
 8003598:	250c      	movcc	r5, #12
 800359a:	2d00      	cmp	r5, #0
 800359c:	4607      	mov	r7, r0
 800359e:	db01      	blt.n	80035a4 <_malloc_r+0x1c>
 80035a0:	42a9      	cmp	r1, r5
 80035a2:	d905      	bls.n	80035b0 <_malloc_r+0x28>
 80035a4:	230c      	movs	r3, #12
 80035a6:	2600      	movs	r6, #0
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	4630      	mov	r0, r6
 80035ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003684 <_malloc_r+0xfc>
 80035b4:	f000 f868 	bl	8003688 <__malloc_lock>
 80035b8:	f8d8 3000 	ldr.w	r3, [r8]
 80035bc:	461c      	mov	r4, r3
 80035be:	bb5c      	cbnz	r4, 8003618 <_malloc_r+0x90>
 80035c0:	4629      	mov	r1, r5
 80035c2:	4638      	mov	r0, r7
 80035c4:	f7ff ffc0 	bl	8003548 <sbrk_aligned>
 80035c8:	1c43      	adds	r3, r0, #1
 80035ca:	4604      	mov	r4, r0
 80035cc:	d155      	bne.n	800367a <_malloc_r+0xf2>
 80035ce:	f8d8 4000 	ldr.w	r4, [r8]
 80035d2:	4626      	mov	r6, r4
 80035d4:	2e00      	cmp	r6, #0
 80035d6:	d145      	bne.n	8003664 <_malloc_r+0xdc>
 80035d8:	2c00      	cmp	r4, #0
 80035da:	d048      	beq.n	800366e <_malloc_r+0xe6>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	4631      	mov	r1, r6
 80035e0:	4638      	mov	r0, r7
 80035e2:	eb04 0903 	add.w	r9, r4, r3
 80035e6:	f000 fc5f 	bl	8003ea8 <_sbrk_r>
 80035ea:	4581      	cmp	r9, r0
 80035ec:	d13f      	bne.n	800366e <_malloc_r+0xe6>
 80035ee:	6821      	ldr	r1, [r4, #0]
 80035f0:	4638      	mov	r0, r7
 80035f2:	1a6d      	subs	r5, r5, r1
 80035f4:	4629      	mov	r1, r5
 80035f6:	f7ff ffa7 	bl	8003548 <sbrk_aligned>
 80035fa:	3001      	adds	r0, #1
 80035fc:	d037      	beq.n	800366e <_malloc_r+0xe6>
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	442b      	add	r3, r5
 8003602:	6023      	str	r3, [r4, #0]
 8003604:	f8d8 3000 	ldr.w	r3, [r8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d038      	beq.n	800367e <_malloc_r+0xf6>
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	42a2      	cmp	r2, r4
 8003610:	d12b      	bne.n	800366a <_malloc_r+0xe2>
 8003612:	2200      	movs	r2, #0
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	e00f      	b.n	8003638 <_malloc_r+0xb0>
 8003618:	6822      	ldr	r2, [r4, #0]
 800361a:	1b52      	subs	r2, r2, r5
 800361c:	d41f      	bmi.n	800365e <_malloc_r+0xd6>
 800361e:	2a0b      	cmp	r2, #11
 8003620:	d917      	bls.n	8003652 <_malloc_r+0xca>
 8003622:	1961      	adds	r1, r4, r5
 8003624:	42a3      	cmp	r3, r4
 8003626:	6025      	str	r5, [r4, #0]
 8003628:	bf18      	it	ne
 800362a:	6059      	strne	r1, [r3, #4]
 800362c:	6863      	ldr	r3, [r4, #4]
 800362e:	bf08      	it	eq
 8003630:	f8c8 1000 	streq.w	r1, [r8]
 8003634:	5162      	str	r2, [r4, r5]
 8003636:	604b      	str	r3, [r1, #4]
 8003638:	4638      	mov	r0, r7
 800363a:	f104 060b 	add.w	r6, r4, #11
 800363e:	f000 f829 	bl	8003694 <__malloc_unlock>
 8003642:	f026 0607 	bic.w	r6, r6, #7
 8003646:	1d23      	adds	r3, r4, #4
 8003648:	1af2      	subs	r2, r6, r3
 800364a:	d0ae      	beq.n	80035aa <_malloc_r+0x22>
 800364c:	1b9b      	subs	r3, r3, r6
 800364e:	50a3      	str	r3, [r4, r2]
 8003650:	e7ab      	b.n	80035aa <_malloc_r+0x22>
 8003652:	42a3      	cmp	r3, r4
 8003654:	6862      	ldr	r2, [r4, #4]
 8003656:	d1dd      	bne.n	8003614 <_malloc_r+0x8c>
 8003658:	f8c8 2000 	str.w	r2, [r8]
 800365c:	e7ec      	b.n	8003638 <_malloc_r+0xb0>
 800365e:	4623      	mov	r3, r4
 8003660:	6864      	ldr	r4, [r4, #4]
 8003662:	e7ac      	b.n	80035be <_malloc_r+0x36>
 8003664:	4634      	mov	r4, r6
 8003666:	6876      	ldr	r6, [r6, #4]
 8003668:	e7b4      	b.n	80035d4 <_malloc_r+0x4c>
 800366a:	4613      	mov	r3, r2
 800366c:	e7cc      	b.n	8003608 <_malloc_r+0x80>
 800366e:	230c      	movs	r3, #12
 8003670:	4638      	mov	r0, r7
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	f000 f80e 	bl	8003694 <__malloc_unlock>
 8003678:	e797      	b.n	80035aa <_malloc_r+0x22>
 800367a:	6025      	str	r5, [r4, #0]
 800367c:	e7dc      	b.n	8003638 <_malloc_r+0xb0>
 800367e:	605b      	str	r3, [r3, #4]
 8003680:	deff      	udf	#255	; 0xff
 8003682:	bf00      	nop
 8003684:	200002d4 	.word	0x200002d4

08003688 <__malloc_lock>:
 8003688:	4801      	ldr	r0, [pc, #4]	; (8003690 <__malloc_lock+0x8>)
 800368a:	f7ff bf12 	b.w	80034b2 <__retarget_lock_acquire_recursive>
 800368e:	bf00      	nop
 8003690:	200002d0 	.word	0x200002d0

08003694 <__malloc_unlock>:
 8003694:	4801      	ldr	r0, [pc, #4]	; (800369c <__malloc_unlock+0x8>)
 8003696:	f7ff bf0d 	b.w	80034b4 <__retarget_lock_release_recursive>
 800369a:	bf00      	nop
 800369c:	200002d0 	.word	0x200002d0

080036a0 <__sfputc_r>:
 80036a0:	6893      	ldr	r3, [r2, #8]
 80036a2:	b410      	push	{r4}
 80036a4:	3b01      	subs	r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	6093      	str	r3, [r2, #8]
 80036aa:	da07      	bge.n	80036bc <__sfputc_r+0x1c>
 80036ac:	6994      	ldr	r4, [r2, #24]
 80036ae:	42a3      	cmp	r3, r4
 80036b0:	db01      	blt.n	80036b6 <__sfputc_r+0x16>
 80036b2:	290a      	cmp	r1, #10
 80036b4:	d102      	bne.n	80036bc <__sfputc_r+0x1c>
 80036b6:	bc10      	pop	{r4}
 80036b8:	f7ff bded 	b.w	8003296 <__swbuf_r>
 80036bc:	6813      	ldr	r3, [r2, #0]
 80036be:	1c58      	adds	r0, r3, #1
 80036c0:	6010      	str	r0, [r2, #0]
 80036c2:	7019      	strb	r1, [r3, #0]
 80036c4:	4608      	mov	r0, r1
 80036c6:	bc10      	pop	{r4}
 80036c8:	4770      	bx	lr

080036ca <__sfputs_r>:
 80036ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036cc:	4606      	mov	r6, r0
 80036ce:	460f      	mov	r7, r1
 80036d0:	4614      	mov	r4, r2
 80036d2:	18d5      	adds	r5, r2, r3
 80036d4:	42ac      	cmp	r4, r5
 80036d6:	d101      	bne.n	80036dc <__sfputs_r+0x12>
 80036d8:	2000      	movs	r0, #0
 80036da:	e007      	b.n	80036ec <__sfputs_r+0x22>
 80036dc:	463a      	mov	r2, r7
 80036de:	4630      	mov	r0, r6
 80036e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036e4:	f7ff ffdc 	bl	80036a0 <__sfputc_r>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d1f3      	bne.n	80036d4 <__sfputs_r+0xa>
 80036ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036f0 <_vfiprintf_r>:
 80036f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f4:	460d      	mov	r5, r1
 80036f6:	4614      	mov	r4, r2
 80036f8:	4698      	mov	r8, r3
 80036fa:	4606      	mov	r6, r0
 80036fc:	b09d      	sub	sp, #116	; 0x74
 80036fe:	b118      	cbz	r0, 8003708 <_vfiprintf_r+0x18>
 8003700:	6a03      	ldr	r3, [r0, #32]
 8003702:	b90b      	cbnz	r3, 8003708 <_vfiprintf_r+0x18>
 8003704:	f7ff fce0 	bl	80030c8 <__sinit>
 8003708:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800370a:	07d9      	lsls	r1, r3, #31
 800370c:	d405      	bmi.n	800371a <_vfiprintf_r+0x2a>
 800370e:	89ab      	ldrh	r3, [r5, #12]
 8003710:	059a      	lsls	r2, r3, #22
 8003712:	d402      	bmi.n	800371a <_vfiprintf_r+0x2a>
 8003714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003716:	f7ff fecc 	bl	80034b2 <__retarget_lock_acquire_recursive>
 800371a:	89ab      	ldrh	r3, [r5, #12]
 800371c:	071b      	lsls	r3, r3, #28
 800371e:	d501      	bpl.n	8003724 <_vfiprintf_r+0x34>
 8003720:	692b      	ldr	r3, [r5, #16]
 8003722:	b99b      	cbnz	r3, 800374c <_vfiprintf_r+0x5c>
 8003724:	4629      	mov	r1, r5
 8003726:	4630      	mov	r0, r6
 8003728:	f7ff fdf2 	bl	8003310 <__swsetup_r>
 800372c:	b170      	cbz	r0, 800374c <_vfiprintf_r+0x5c>
 800372e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003730:	07dc      	lsls	r4, r3, #31
 8003732:	d504      	bpl.n	800373e <_vfiprintf_r+0x4e>
 8003734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003738:	b01d      	add	sp, #116	; 0x74
 800373a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800373e:	89ab      	ldrh	r3, [r5, #12]
 8003740:	0598      	lsls	r0, r3, #22
 8003742:	d4f7      	bmi.n	8003734 <_vfiprintf_r+0x44>
 8003744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003746:	f7ff feb5 	bl	80034b4 <__retarget_lock_release_recursive>
 800374a:	e7f3      	b.n	8003734 <_vfiprintf_r+0x44>
 800374c:	2300      	movs	r3, #0
 800374e:	9309      	str	r3, [sp, #36]	; 0x24
 8003750:	2320      	movs	r3, #32
 8003752:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003756:	2330      	movs	r3, #48	; 0x30
 8003758:	f04f 0901 	mov.w	r9, #1
 800375c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003760:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003910 <_vfiprintf_r+0x220>
 8003764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003768:	4623      	mov	r3, r4
 800376a:	469a      	mov	sl, r3
 800376c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003770:	b10a      	cbz	r2, 8003776 <_vfiprintf_r+0x86>
 8003772:	2a25      	cmp	r2, #37	; 0x25
 8003774:	d1f9      	bne.n	800376a <_vfiprintf_r+0x7a>
 8003776:	ebba 0b04 	subs.w	fp, sl, r4
 800377a:	d00b      	beq.n	8003794 <_vfiprintf_r+0xa4>
 800377c:	465b      	mov	r3, fp
 800377e:	4622      	mov	r2, r4
 8003780:	4629      	mov	r1, r5
 8003782:	4630      	mov	r0, r6
 8003784:	f7ff ffa1 	bl	80036ca <__sfputs_r>
 8003788:	3001      	adds	r0, #1
 800378a:	f000 80a9 	beq.w	80038e0 <_vfiprintf_r+0x1f0>
 800378e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003790:	445a      	add	r2, fp
 8003792:	9209      	str	r2, [sp, #36]	; 0x24
 8003794:	f89a 3000 	ldrb.w	r3, [sl]
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80a1 	beq.w	80038e0 <_vfiprintf_r+0x1f0>
 800379e:	2300      	movs	r3, #0
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037a8:	f10a 0a01 	add.w	sl, sl, #1
 80037ac:	9304      	str	r3, [sp, #16]
 80037ae:	9307      	str	r3, [sp, #28]
 80037b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037b4:	931a      	str	r3, [sp, #104]	; 0x68
 80037b6:	4654      	mov	r4, sl
 80037b8:	2205      	movs	r2, #5
 80037ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037be:	4854      	ldr	r0, [pc, #336]	; (8003910 <_vfiprintf_r+0x220>)
 80037c0:	f000 fb82 	bl	8003ec8 <memchr>
 80037c4:	9a04      	ldr	r2, [sp, #16]
 80037c6:	b9d8      	cbnz	r0, 8003800 <_vfiprintf_r+0x110>
 80037c8:	06d1      	lsls	r1, r2, #27
 80037ca:	bf44      	itt	mi
 80037cc:	2320      	movmi	r3, #32
 80037ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037d2:	0713      	lsls	r3, r2, #28
 80037d4:	bf44      	itt	mi
 80037d6:	232b      	movmi	r3, #43	; 0x2b
 80037d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037dc:	f89a 3000 	ldrb.w	r3, [sl]
 80037e0:	2b2a      	cmp	r3, #42	; 0x2a
 80037e2:	d015      	beq.n	8003810 <_vfiprintf_r+0x120>
 80037e4:	4654      	mov	r4, sl
 80037e6:	2000      	movs	r0, #0
 80037e8:	f04f 0c0a 	mov.w	ip, #10
 80037ec:	9a07      	ldr	r2, [sp, #28]
 80037ee:	4621      	mov	r1, r4
 80037f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037f4:	3b30      	subs	r3, #48	; 0x30
 80037f6:	2b09      	cmp	r3, #9
 80037f8:	d94d      	bls.n	8003896 <_vfiprintf_r+0x1a6>
 80037fa:	b1b0      	cbz	r0, 800382a <_vfiprintf_r+0x13a>
 80037fc:	9207      	str	r2, [sp, #28]
 80037fe:	e014      	b.n	800382a <_vfiprintf_r+0x13a>
 8003800:	eba0 0308 	sub.w	r3, r0, r8
 8003804:	fa09 f303 	lsl.w	r3, r9, r3
 8003808:	4313      	orrs	r3, r2
 800380a:	46a2      	mov	sl, r4
 800380c:	9304      	str	r3, [sp, #16]
 800380e:	e7d2      	b.n	80037b6 <_vfiprintf_r+0xc6>
 8003810:	9b03      	ldr	r3, [sp, #12]
 8003812:	1d19      	adds	r1, r3, #4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	9103      	str	r1, [sp, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	bfbb      	ittet	lt
 800381c:	425b      	neglt	r3, r3
 800381e:	f042 0202 	orrlt.w	r2, r2, #2
 8003822:	9307      	strge	r3, [sp, #28]
 8003824:	9307      	strlt	r3, [sp, #28]
 8003826:	bfb8      	it	lt
 8003828:	9204      	strlt	r2, [sp, #16]
 800382a:	7823      	ldrb	r3, [r4, #0]
 800382c:	2b2e      	cmp	r3, #46	; 0x2e
 800382e:	d10c      	bne.n	800384a <_vfiprintf_r+0x15a>
 8003830:	7863      	ldrb	r3, [r4, #1]
 8003832:	2b2a      	cmp	r3, #42	; 0x2a
 8003834:	d134      	bne.n	80038a0 <_vfiprintf_r+0x1b0>
 8003836:	9b03      	ldr	r3, [sp, #12]
 8003838:	3402      	adds	r4, #2
 800383a:	1d1a      	adds	r2, r3, #4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	9203      	str	r2, [sp, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	bfb8      	it	lt
 8003844:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003848:	9305      	str	r3, [sp, #20]
 800384a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003914 <_vfiprintf_r+0x224>
 800384e:	2203      	movs	r2, #3
 8003850:	4650      	mov	r0, sl
 8003852:	7821      	ldrb	r1, [r4, #0]
 8003854:	f000 fb38 	bl	8003ec8 <memchr>
 8003858:	b138      	cbz	r0, 800386a <_vfiprintf_r+0x17a>
 800385a:	2240      	movs	r2, #64	; 0x40
 800385c:	9b04      	ldr	r3, [sp, #16]
 800385e:	eba0 000a 	sub.w	r0, r0, sl
 8003862:	4082      	lsls	r2, r0
 8003864:	4313      	orrs	r3, r2
 8003866:	3401      	adds	r4, #1
 8003868:	9304      	str	r3, [sp, #16]
 800386a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800386e:	2206      	movs	r2, #6
 8003870:	4829      	ldr	r0, [pc, #164]	; (8003918 <_vfiprintf_r+0x228>)
 8003872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003876:	f000 fb27 	bl	8003ec8 <memchr>
 800387a:	2800      	cmp	r0, #0
 800387c:	d03f      	beq.n	80038fe <_vfiprintf_r+0x20e>
 800387e:	4b27      	ldr	r3, [pc, #156]	; (800391c <_vfiprintf_r+0x22c>)
 8003880:	bb1b      	cbnz	r3, 80038ca <_vfiprintf_r+0x1da>
 8003882:	9b03      	ldr	r3, [sp, #12]
 8003884:	3307      	adds	r3, #7
 8003886:	f023 0307 	bic.w	r3, r3, #7
 800388a:	3308      	adds	r3, #8
 800388c:	9303      	str	r3, [sp, #12]
 800388e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003890:	443b      	add	r3, r7
 8003892:	9309      	str	r3, [sp, #36]	; 0x24
 8003894:	e768      	b.n	8003768 <_vfiprintf_r+0x78>
 8003896:	460c      	mov	r4, r1
 8003898:	2001      	movs	r0, #1
 800389a:	fb0c 3202 	mla	r2, ip, r2, r3
 800389e:	e7a6      	b.n	80037ee <_vfiprintf_r+0xfe>
 80038a0:	2300      	movs	r3, #0
 80038a2:	f04f 0c0a 	mov.w	ip, #10
 80038a6:	4619      	mov	r1, r3
 80038a8:	3401      	adds	r4, #1
 80038aa:	9305      	str	r3, [sp, #20]
 80038ac:	4620      	mov	r0, r4
 80038ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038b2:	3a30      	subs	r2, #48	; 0x30
 80038b4:	2a09      	cmp	r2, #9
 80038b6:	d903      	bls.n	80038c0 <_vfiprintf_r+0x1d0>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0c6      	beq.n	800384a <_vfiprintf_r+0x15a>
 80038bc:	9105      	str	r1, [sp, #20]
 80038be:	e7c4      	b.n	800384a <_vfiprintf_r+0x15a>
 80038c0:	4604      	mov	r4, r0
 80038c2:	2301      	movs	r3, #1
 80038c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80038c8:	e7f0      	b.n	80038ac <_vfiprintf_r+0x1bc>
 80038ca:	ab03      	add	r3, sp, #12
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	462a      	mov	r2, r5
 80038d0:	4630      	mov	r0, r6
 80038d2:	4b13      	ldr	r3, [pc, #76]	; (8003920 <_vfiprintf_r+0x230>)
 80038d4:	a904      	add	r1, sp, #16
 80038d6:	f3af 8000 	nop.w
 80038da:	4607      	mov	r7, r0
 80038dc:	1c78      	adds	r0, r7, #1
 80038de:	d1d6      	bne.n	800388e <_vfiprintf_r+0x19e>
 80038e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038e2:	07d9      	lsls	r1, r3, #31
 80038e4:	d405      	bmi.n	80038f2 <_vfiprintf_r+0x202>
 80038e6:	89ab      	ldrh	r3, [r5, #12]
 80038e8:	059a      	lsls	r2, r3, #22
 80038ea:	d402      	bmi.n	80038f2 <_vfiprintf_r+0x202>
 80038ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038ee:	f7ff fde1 	bl	80034b4 <__retarget_lock_release_recursive>
 80038f2:	89ab      	ldrh	r3, [r5, #12]
 80038f4:	065b      	lsls	r3, r3, #25
 80038f6:	f53f af1d 	bmi.w	8003734 <_vfiprintf_r+0x44>
 80038fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038fc:	e71c      	b.n	8003738 <_vfiprintf_r+0x48>
 80038fe:	ab03      	add	r3, sp, #12
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	462a      	mov	r2, r5
 8003904:	4630      	mov	r0, r6
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <_vfiprintf_r+0x230>)
 8003908:	a904      	add	r1, sp, #16
 800390a:	f000 f87d 	bl	8003a08 <_printf_i>
 800390e:	e7e4      	b.n	80038da <_vfiprintf_r+0x1ea>
 8003910:	08003f36 	.word	0x08003f36
 8003914:	08003f3c 	.word	0x08003f3c
 8003918:	08003f40 	.word	0x08003f40
 800391c:	00000000 	.word	0x00000000
 8003920:	080036cb 	.word	0x080036cb

08003924 <_printf_common>:
 8003924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003928:	4616      	mov	r6, r2
 800392a:	4699      	mov	r9, r3
 800392c:	688a      	ldr	r2, [r1, #8]
 800392e:	690b      	ldr	r3, [r1, #16]
 8003930:	4607      	mov	r7, r0
 8003932:	4293      	cmp	r3, r2
 8003934:	bfb8      	it	lt
 8003936:	4613      	movlt	r3, r2
 8003938:	6033      	str	r3, [r6, #0]
 800393a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800393e:	460c      	mov	r4, r1
 8003940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003944:	b10a      	cbz	r2, 800394a <_printf_common+0x26>
 8003946:	3301      	adds	r3, #1
 8003948:	6033      	str	r3, [r6, #0]
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	0699      	lsls	r1, r3, #26
 800394e:	bf42      	ittt	mi
 8003950:	6833      	ldrmi	r3, [r6, #0]
 8003952:	3302      	addmi	r3, #2
 8003954:	6033      	strmi	r3, [r6, #0]
 8003956:	6825      	ldr	r5, [r4, #0]
 8003958:	f015 0506 	ands.w	r5, r5, #6
 800395c:	d106      	bne.n	800396c <_printf_common+0x48>
 800395e:	f104 0a19 	add.w	sl, r4, #25
 8003962:	68e3      	ldr	r3, [r4, #12]
 8003964:	6832      	ldr	r2, [r6, #0]
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	42ab      	cmp	r3, r5
 800396a:	dc2b      	bgt.n	80039c4 <_printf_common+0xa0>
 800396c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003970:	1e13      	subs	r3, r2, #0
 8003972:	6822      	ldr	r2, [r4, #0]
 8003974:	bf18      	it	ne
 8003976:	2301      	movne	r3, #1
 8003978:	0692      	lsls	r2, r2, #26
 800397a:	d430      	bmi.n	80039de <_printf_common+0xba>
 800397c:	4649      	mov	r1, r9
 800397e:	4638      	mov	r0, r7
 8003980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003984:	47c0      	blx	r8
 8003986:	3001      	adds	r0, #1
 8003988:	d023      	beq.n	80039d2 <_printf_common+0xae>
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	6922      	ldr	r2, [r4, #16]
 800398e:	f003 0306 	and.w	r3, r3, #6
 8003992:	2b04      	cmp	r3, #4
 8003994:	bf14      	ite	ne
 8003996:	2500      	movne	r5, #0
 8003998:	6833      	ldreq	r3, [r6, #0]
 800399a:	f04f 0600 	mov.w	r6, #0
 800399e:	bf08      	it	eq
 80039a0:	68e5      	ldreq	r5, [r4, #12]
 80039a2:	f104 041a 	add.w	r4, r4, #26
 80039a6:	bf08      	it	eq
 80039a8:	1aed      	subeq	r5, r5, r3
 80039aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80039ae:	bf08      	it	eq
 80039b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039b4:	4293      	cmp	r3, r2
 80039b6:	bfc4      	itt	gt
 80039b8:	1a9b      	subgt	r3, r3, r2
 80039ba:	18ed      	addgt	r5, r5, r3
 80039bc:	42b5      	cmp	r5, r6
 80039be:	d11a      	bne.n	80039f6 <_printf_common+0xd2>
 80039c0:	2000      	movs	r0, #0
 80039c2:	e008      	b.n	80039d6 <_printf_common+0xb2>
 80039c4:	2301      	movs	r3, #1
 80039c6:	4652      	mov	r2, sl
 80039c8:	4649      	mov	r1, r9
 80039ca:	4638      	mov	r0, r7
 80039cc:	47c0      	blx	r8
 80039ce:	3001      	adds	r0, #1
 80039d0:	d103      	bne.n	80039da <_printf_common+0xb6>
 80039d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039da:	3501      	adds	r5, #1
 80039dc:	e7c1      	b.n	8003962 <_printf_common+0x3e>
 80039de:	2030      	movs	r0, #48	; 0x30
 80039e0:	18e1      	adds	r1, r4, r3
 80039e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039ec:	4422      	add	r2, r4
 80039ee:	3302      	adds	r3, #2
 80039f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039f4:	e7c2      	b.n	800397c <_printf_common+0x58>
 80039f6:	2301      	movs	r3, #1
 80039f8:	4622      	mov	r2, r4
 80039fa:	4649      	mov	r1, r9
 80039fc:	4638      	mov	r0, r7
 80039fe:	47c0      	blx	r8
 8003a00:	3001      	adds	r0, #1
 8003a02:	d0e6      	beq.n	80039d2 <_printf_common+0xae>
 8003a04:	3601      	adds	r6, #1
 8003a06:	e7d9      	b.n	80039bc <_printf_common+0x98>

08003a08 <_printf_i>:
 8003a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a0c:	7e0f      	ldrb	r7, [r1, #24]
 8003a0e:	4691      	mov	r9, r2
 8003a10:	2f78      	cmp	r7, #120	; 0x78
 8003a12:	4680      	mov	r8, r0
 8003a14:	460c      	mov	r4, r1
 8003a16:	469a      	mov	sl, r3
 8003a18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a1e:	d807      	bhi.n	8003a30 <_printf_i+0x28>
 8003a20:	2f62      	cmp	r7, #98	; 0x62
 8003a22:	d80a      	bhi.n	8003a3a <_printf_i+0x32>
 8003a24:	2f00      	cmp	r7, #0
 8003a26:	f000 80d5 	beq.w	8003bd4 <_printf_i+0x1cc>
 8003a2a:	2f58      	cmp	r7, #88	; 0x58
 8003a2c:	f000 80c1 	beq.w	8003bb2 <_printf_i+0x1aa>
 8003a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a38:	e03a      	b.n	8003ab0 <_printf_i+0xa8>
 8003a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a3e:	2b15      	cmp	r3, #21
 8003a40:	d8f6      	bhi.n	8003a30 <_printf_i+0x28>
 8003a42:	a101      	add	r1, pc, #4	; (adr r1, 8003a48 <_printf_i+0x40>)
 8003a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a48:	08003aa1 	.word	0x08003aa1
 8003a4c:	08003ab5 	.word	0x08003ab5
 8003a50:	08003a31 	.word	0x08003a31
 8003a54:	08003a31 	.word	0x08003a31
 8003a58:	08003a31 	.word	0x08003a31
 8003a5c:	08003a31 	.word	0x08003a31
 8003a60:	08003ab5 	.word	0x08003ab5
 8003a64:	08003a31 	.word	0x08003a31
 8003a68:	08003a31 	.word	0x08003a31
 8003a6c:	08003a31 	.word	0x08003a31
 8003a70:	08003a31 	.word	0x08003a31
 8003a74:	08003bbb 	.word	0x08003bbb
 8003a78:	08003ae1 	.word	0x08003ae1
 8003a7c:	08003b75 	.word	0x08003b75
 8003a80:	08003a31 	.word	0x08003a31
 8003a84:	08003a31 	.word	0x08003a31
 8003a88:	08003bdd 	.word	0x08003bdd
 8003a8c:	08003a31 	.word	0x08003a31
 8003a90:	08003ae1 	.word	0x08003ae1
 8003a94:	08003a31 	.word	0x08003a31
 8003a98:	08003a31 	.word	0x08003a31
 8003a9c:	08003b7d 	.word	0x08003b7d
 8003aa0:	682b      	ldr	r3, [r5, #0]
 8003aa2:	1d1a      	adds	r2, r3, #4
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	602a      	str	r2, [r5, #0]
 8003aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0a0      	b.n	8003bf6 <_printf_i+0x1ee>
 8003ab4:	6820      	ldr	r0, [r4, #0]
 8003ab6:	682b      	ldr	r3, [r5, #0]
 8003ab8:	0607      	lsls	r7, r0, #24
 8003aba:	f103 0104 	add.w	r1, r3, #4
 8003abe:	6029      	str	r1, [r5, #0]
 8003ac0:	d501      	bpl.n	8003ac6 <_printf_i+0xbe>
 8003ac2:	681e      	ldr	r6, [r3, #0]
 8003ac4:	e003      	b.n	8003ace <_printf_i+0xc6>
 8003ac6:	0646      	lsls	r6, r0, #25
 8003ac8:	d5fb      	bpl.n	8003ac2 <_printf_i+0xba>
 8003aca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003ace:	2e00      	cmp	r6, #0
 8003ad0:	da03      	bge.n	8003ada <_printf_i+0xd2>
 8003ad2:	232d      	movs	r3, #45	; 0x2d
 8003ad4:	4276      	negs	r6, r6
 8003ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ada:	230a      	movs	r3, #10
 8003adc:	4859      	ldr	r0, [pc, #356]	; (8003c44 <_printf_i+0x23c>)
 8003ade:	e012      	b.n	8003b06 <_printf_i+0xfe>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	6820      	ldr	r0, [r4, #0]
 8003ae4:	1d19      	adds	r1, r3, #4
 8003ae6:	6029      	str	r1, [r5, #0]
 8003ae8:	0605      	lsls	r5, r0, #24
 8003aea:	d501      	bpl.n	8003af0 <_printf_i+0xe8>
 8003aec:	681e      	ldr	r6, [r3, #0]
 8003aee:	e002      	b.n	8003af6 <_printf_i+0xee>
 8003af0:	0641      	lsls	r1, r0, #25
 8003af2:	d5fb      	bpl.n	8003aec <_printf_i+0xe4>
 8003af4:	881e      	ldrh	r6, [r3, #0]
 8003af6:	2f6f      	cmp	r7, #111	; 0x6f
 8003af8:	bf0c      	ite	eq
 8003afa:	2308      	moveq	r3, #8
 8003afc:	230a      	movne	r3, #10
 8003afe:	4851      	ldr	r0, [pc, #324]	; (8003c44 <_printf_i+0x23c>)
 8003b00:	2100      	movs	r1, #0
 8003b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b06:	6865      	ldr	r5, [r4, #4]
 8003b08:	2d00      	cmp	r5, #0
 8003b0a:	bfa8      	it	ge
 8003b0c:	6821      	ldrge	r1, [r4, #0]
 8003b0e:	60a5      	str	r5, [r4, #8]
 8003b10:	bfa4      	itt	ge
 8003b12:	f021 0104 	bicge.w	r1, r1, #4
 8003b16:	6021      	strge	r1, [r4, #0]
 8003b18:	b90e      	cbnz	r6, 8003b1e <_printf_i+0x116>
 8003b1a:	2d00      	cmp	r5, #0
 8003b1c:	d04b      	beq.n	8003bb6 <_printf_i+0x1ae>
 8003b1e:	4615      	mov	r5, r2
 8003b20:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b24:	fb03 6711 	mls	r7, r3, r1, r6
 8003b28:	5dc7      	ldrb	r7, [r0, r7]
 8003b2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b2e:	4637      	mov	r7, r6
 8003b30:	42bb      	cmp	r3, r7
 8003b32:	460e      	mov	r6, r1
 8003b34:	d9f4      	bls.n	8003b20 <_printf_i+0x118>
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d10b      	bne.n	8003b52 <_printf_i+0x14a>
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	07de      	lsls	r6, r3, #31
 8003b3e:	d508      	bpl.n	8003b52 <_printf_i+0x14a>
 8003b40:	6923      	ldr	r3, [r4, #16]
 8003b42:	6861      	ldr	r1, [r4, #4]
 8003b44:	4299      	cmp	r1, r3
 8003b46:	bfde      	ittt	le
 8003b48:	2330      	movle	r3, #48	; 0x30
 8003b4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b4e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003b52:	1b52      	subs	r2, r2, r5
 8003b54:	6122      	str	r2, [r4, #16]
 8003b56:	464b      	mov	r3, r9
 8003b58:	4621      	mov	r1, r4
 8003b5a:	4640      	mov	r0, r8
 8003b5c:	f8cd a000 	str.w	sl, [sp]
 8003b60:	aa03      	add	r2, sp, #12
 8003b62:	f7ff fedf 	bl	8003924 <_printf_common>
 8003b66:	3001      	adds	r0, #1
 8003b68:	d14a      	bne.n	8003c00 <_printf_i+0x1f8>
 8003b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b6e:	b004      	add	sp, #16
 8003b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	f043 0320 	orr.w	r3, r3, #32
 8003b7a:	6023      	str	r3, [r4, #0]
 8003b7c:	2778      	movs	r7, #120	; 0x78
 8003b7e:	4832      	ldr	r0, [pc, #200]	; (8003c48 <_printf_i+0x240>)
 8003b80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	6829      	ldr	r1, [r5, #0]
 8003b88:	061f      	lsls	r7, r3, #24
 8003b8a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b8e:	d402      	bmi.n	8003b96 <_printf_i+0x18e>
 8003b90:	065f      	lsls	r7, r3, #25
 8003b92:	bf48      	it	mi
 8003b94:	b2b6      	uxthmi	r6, r6
 8003b96:	07df      	lsls	r7, r3, #31
 8003b98:	bf48      	it	mi
 8003b9a:	f043 0320 	orrmi.w	r3, r3, #32
 8003b9e:	6029      	str	r1, [r5, #0]
 8003ba0:	bf48      	it	mi
 8003ba2:	6023      	strmi	r3, [r4, #0]
 8003ba4:	b91e      	cbnz	r6, 8003bae <_printf_i+0x1a6>
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	f023 0320 	bic.w	r3, r3, #32
 8003bac:	6023      	str	r3, [r4, #0]
 8003bae:	2310      	movs	r3, #16
 8003bb0:	e7a6      	b.n	8003b00 <_printf_i+0xf8>
 8003bb2:	4824      	ldr	r0, [pc, #144]	; (8003c44 <_printf_i+0x23c>)
 8003bb4:	e7e4      	b.n	8003b80 <_printf_i+0x178>
 8003bb6:	4615      	mov	r5, r2
 8003bb8:	e7bd      	b.n	8003b36 <_printf_i+0x12e>
 8003bba:	682b      	ldr	r3, [r5, #0]
 8003bbc:	6826      	ldr	r6, [r4, #0]
 8003bbe:	1d18      	adds	r0, r3, #4
 8003bc0:	6961      	ldr	r1, [r4, #20]
 8003bc2:	6028      	str	r0, [r5, #0]
 8003bc4:	0635      	lsls	r5, r6, #24
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	d501      	bpl.n	8003bce <_printf_i+0x1c6>
 8003bca:	6019      	str	r1, [r3, #0]
 8003bcc:	e002      	b.n	8003bd4 <_printf_i+0x1cc>
 8003bce:	0670      	lsls	r0, r6, #25
 8003bd0:	d5fb      	bpl.n	8003bca <_printf_i+0x1c2>
 8003bd2:	8019      	strh	r1, [r3, #0]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	4615      	mov	r5, r2
 8003bd8:	6123      	str	r3, [r4, #16]
 8003bda:	e7bc      	b.n	8003b56 <_printf_i+0x14e>
 8003bdc:	682b      	ldr	r3, [r5, #0]
 8003bde:	2100      	movs	r1, #0
 8003be0:	1d1a      	adds	r2, r3, #4
 8003be2:	602a      	str	r2, [r5, #0]
 8003be4:	681d      	ldr	r5, [r3, #0]
 8003be6:	6862      	ldr	r2, [r4, #4]
 8003be8:	4628      	mov	r0, r5
 8003bea:	f000 f96d 	bl	8003ec8 <memchr>
 8003bee:	b108      	cbz	r0, 8003bf4 <_printf_i+0x1ec>
 8003bf0:	1b40      	subs	r0, r0, r5
 8003bf2:	6060      	str	r0, [r4, #4]
 8003bf4:	6863      	ldr	r3, [r4, #4]
 8003bf6:	6123      	str	r3, [r4, #16]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bfe:	e7aa      	b.n	8003b56 <_printf_i+0x14e>
 8003c00:	462a      	mov	r2, r5
 8003c02:	4649      	mov	r1, r9
 8003c04:	4640      	mov	r0, r8
 8003c06:	6923      	ldr	r3, [r4, #16]
 8003c08:	47d0      	blx	sl
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	d0ad      	beq.n	8003b6a <_printf_i+0x162>
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	079b      	lsls	r3, r3, #30
 8003c12:	d413      	bmi.n	8003c3c <_printf_i+0x234>
 8003c14:	68e0      	ldr	r0, [r4, #12]
 8003c16:	9b03      	ldr	r3, [sp, #12]
 8003c18:	4298      	cmp	r0, r3
 8003c1a:	bfb8      	it	lt
 8003c1c:	4618      	movlt	r0, r3
 8003c1e:	e7a6      	b.n	8003b6e <_printf_i+0x166>
 8003c20:	2301      	movs	r3, #1
 8003c22:	4632      	mov	r2, r6
 8003c24:	4649      	mov	r1, r9
 8003c26:	4640      	mov	r0, r8
 8003c28:	47d0      	blx	sl
 8003c2a:	3001      	adds	r0, #1
 8003c2c:	d09d      	beq.n	8003b6a <_printf_i+0x162>
 8003c2e:	3501      	adds	r5, #1
 8003c30:	68e3      	ldr	r3, [r4, #12]
 8003c32:	9903      	ldr	r1, [sp, #12]
 8003c34:	1a5b      	subs	r3, r3, r1
 8003c36:	42ab      	cmp	r3, r5
 8003c38:	dcf2      	bgt.n	8003c20 <_printf_i+0x218>
 8003c3a:	e7eb      	b.n	8003c14 <_printf_i+0x20c>
 8003c3c:	2500      	movs	r5, #0
 8003c3e:	f104 0619 	add.w	r6, r4, #25
 8003c42:	e7f5      	b.n	8003c30 <_printf_i+0x228>
 8003c44:	08003f47 	.word	0x08003f47
 8003c48:	08003f58 	.word	0x08003f58

08003c4c <__sflush_r>:
 8003c4c:	898a      	ldrh	r2, [r1, #12]
 8003c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c50:	4605      	mov	r5, r0
 8003c52:	0710      	lsls	r0, r2, #28
 8003c54:	460c      	mov	r4, r1
 8003c56:	d457      	bmi.n	8003d08 <__sflush_r+0xbc>
 8003c58:	684b      	ldr	r3, [r1, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	dc04      	bgt.n	8003c68 <__sflush_r+0x1c>
 8003c5e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	dc01      	bgt.n	8003c68 <__sflush_r+0x1c>
 8003c64:	2000      	movs	r0, #0
 8003c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c6a:	2e00      	cmp	r6, #0
 8003c6c:	d0fa      	beq.n	8003c64 <__sflush_r+0x18>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c74:	682f      	ldr	r7, [r5, #0]
 8003c76:	6a21      	ldr	r1, [r4, #32]
 8003c78:	602b      	str	r3, [r5, #0]
 8003c7a:	d032      	beq.n	8003ce2 <__sflush_r+0x96>
 8003c7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c7e:	89a3      	ldrh	r3, [r4, #12]
 8003c80:	075a      	lsls	r2, r3, #29
 8003c82:	d505      	bpl.n	8003c90 <__sflush_r+0x44>
 8003c84:	6863      	ldr	r3, [r4, #4]
 8003c86:	1ac0      	subs	r0, r0, r3
 8003c88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c8a:	b10b      	cbz	r3, 8003c90 <__sflush_r+0x44>
 8003c8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c8e:	1ac0      	subs	r0, r0, r3
 8003c90:	2300      	movs	r3, #0
 8003c92:	4602      	mov	r2, r0
 8003c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c96:	4628      	mov	r0, r5
 8003c98:	6a21      	ldr	r1, [r4, #32]
 8003c9a:	47b0      	blx	r6
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	89a3      	ldrh	r3, [r4, #12]
 8003ca0:	d106      	bne.n	8003cb0 <__sflush_r+0x64>
 8003ca2:	6829      	ldr	r1, [r5, #0]
 8003ca4:	291d      	cmp	r1, #29
 8003ca6:	d82b      	bhi.n	8003d00 <__sflush_r+0xb4>
 8003ca8:	4a28      	ldr	r2, [pc, #160]	; (8003d4c <__sflush_r+0x100>)
 8003caa:	410a      	asrs	r2, r1
 8003cac:	07d6      	lsls	r6, r2, #31
 8003cae:	d427      	bmi.n	8003d00 <__sflush_r+0xb4>
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	6062      	str	r2, [r4, #4]
 8003cb4:	6922      	ldr	r2, [r4, #16]
 8003cb6:	04d9      	lsls	r1, r3, #19
 8003cb8:	6022      	str	r2, [r4, #0]
 8003cba:	d504      	bpl.n	8003cc6 <__sflush_r+0x7a>
 8003cbc:	1c42      	adds	r2, r0, #1
 8003cbe:	d101      	bne.n	8003cc4 <__sflush_r+0x78>
 8003cc0:	682b      	ldr	r3, [r5, #0]
 8003cc2:	b903      	cbnz	r3, 8003cc6 <__sflush_r+0x7a>
 8003cc4:	6560      	str	r0, [r4, #84]	; 0x54
 8003cc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cc8:	602f      	str	r7, [r5, #0]
 8003cca:	2900      	cmp	r1, #0
 8003ccc:	d0ca      	beq.n	8003c64 <__sflush_r+0x18>
 8003cce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cd2:	4299      	cmp	r1, r3
 8003cd4:	d002      	beq.n	8003cdc <__sflush_r+0x90>
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	f7ff fbee 	bl	80034b8 <_free_r>
 8003cdc:	2000      	movs	r0, #0
 8003cde:	6360      	str	r0, [r4, #52]	; 0x34
 8003ce0:	e7c1      	b.n	8003c66 <__sflush_r+0x1a>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	47b0      	blx	r6
 8003ce8:	1c41      	adds	r1, r0, #1
 8003cea:	d1c8      	bne.n	8003c7e <__sflush_r+0x32>
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0c5      	beq.n	8003c7e <__sflush_r+0x32>
 8003cf2:	2b1d      	cmp	r3, #29
 8003cf4:	d001      	beq.n	8003cfa <__sflush_r+0xae>
 8003cf6:	2b16      	cmp	r3, #22
 8003cf8:	d101      	bne.n	8003cfe <__sflush_r+0xb2>
 8003cfa:	602f      	str	r7, [r5, #0]
 8003cfc:	e7b2      	b.n	8003c64 <__sflush_r+0x18>
 8003cfe:	89a3      	ldrh	r3, [r4, #12]
 8003d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d04:	81a3      	strh	r3, [r4, #12]
 8003d06:	e7ae      	b.n	8003c66 <__sflush_r+0x1a>
 8003d08:	690f      	ldr	r7, [r1, #16]
 8003d0a:	2f00      	cmp	r7, #0
 8003d0c:	d0aa      	beq.n	8003c64 <__sflush_r+0x18>
 8003d0e:	0793      	lsls	r3, r2, #30
 8003d10:	bf18      	it	ne
 8003d12:	2300      	movne	r3, #0
 8003d14:	680e      	ldr	r6, [r1, #0]
 8003d16:	bf08      	it	eq
 8003d18:	694b      	ldreq	r3, [r1, #20]
 8003d1a:	1bf6      	subs	r6, r6, r7
 8003d1c:	600f      	str	r7, [r1, #0]
 8003d1e:	608b      	str	r3, [r1, #8]
 8003d20:	2e00      	cmp	r6, #0
 8003d22:	dd9f      	ble.n	8003c64 <__sflush_r+0x18>
 8003d24:	4633      	mov	r3, r6
 8003d26:	463a      	mov	r2, r7
 8003d28:	4628      	mov	r0, r5
 8003d2a:	6a21      	ldr	r1, [r4, #32]
 8003d2c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003d30:	47e0      	blx	ip
 8003d32:	2800      	cmp	r0, #0
 8003d34:	dc06      	bgt.n	8003d44 <__sflush_r+0xf8>
 8003d36:	89a3      	ldrh	r3, [r4, #12]
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d40:	81a3      	strh	r3, [r4, #12]
 8003d42:	e790      	b.n	8003c66 <__sflush_r+0x1a>
 8003d44:	4407      	add	r7, r0
 8003d46:	1a36      	subs	r6, r6, r0
 8003d48:	e7ea      	b.n	8003d20 <__sflush_r+0xd4>
 8003d4a:	bf00      	nop
 8003d4c:	dfbffffe 	.word	0xdfbffffe

08003d50 <_fflush_r>:
 8003d50:	b538      	push	{r3, r4, r5, lr}
 8003d52:	690b      	ldr	r3, [r1, #16]
 8003d54:	4605      	mov	r5, r0
 8003d56:	460c      	mov	r4, r1
 8003d58:	b913      	cbnz	r3, 8003d60 <_fflush_r+0x10>
 8003d5a:	2500      	movs	r5, #0
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	bd38      	pop	{r3, r4, r5, pc}
 8003d60:	b118      	cbz	r0, 8003d6a <_fflush_r+0x1a>
 8003d62:	6a03      	ldr	r3, [r0, #32]
 8003d64:	b90b      	cbnz	r3, 8003d6a <_fflush_r+0x1a>
 8003d66:	f7ff f9af 	bl	80030c8 <__sinit>
 8003d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f3      	beq.n	8003d5a <_fflush_r+0xa>
 8003d72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d74:	07d0      	lsls	r0, r2, #31
 8003d76:	d404      	bmi.n	8003d82 <_fflush_r+0x32>
 8003d78:	0599      	lsls	r1, r3, #22
 8003d7a:	d402      	bmi.n	8003d82 <_fflush_r+0x32>
 8003d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d7e:	f7ff fb98 	bl	80034b2 <__retarget_lock_acquire_recursive>
 8003d82:	4628      	mov	r0, r5
 8003d84:	4621      	mov	r1, r4
 8003d86:	f7ff ff61 	bl	8003c4c <__sflush_r>
 8003d8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d8c:	4605      	mov	r5, r0
 8003d8e:	07da      	lsls	r2, r3, #31
 8003d90:	d4e4      	bmi.n	8003d5c <_fflush_r+0xc>
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	059b      	lsls	r3, r3, #22
 8003d96:	d4e1      	bmi.n	8003d5c <_fflush_r+0xc>
 8003d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d9a:	f7ff fb8b 	bl	80034b4 <__retarget_lock_release_recursive>
 8003d9e:	e7dd      	b.n	8003d5c <_fflush_r+0xc>

08003da0 <__swhatbuf_r>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	460c      	mov	r4, r1
 8003da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da8:	4615      	mov	r5, r2
 8003daa:	2900      	cmp	r1, #0
 8003dac:	461e      	mov	r6, r3
 8003dae:	b096      	sub	sp, #88	; 0x58
 8003db0:	da0c      	bge.n	8003dcc <__swhatbuf_r+0x2c>
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	2100      	movs	r1, #0
 8003db6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003dba:	bf0c      	ite	eq
 8003dbc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003dc0:	2340      	movne	r3, #64	; 0x40
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	6031      	str	r1, [r6, #0]
 8003dc6:	602b      	str	r3, [r5, #0]
 8003dc8:	b016      	add	sp, #88	; 0x58
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	466a      	mov	r2, sp
 8003dce:	f000 f849 	bl	8003e64 <_fstat_r>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	dbed      	blt.n	8003db2 <__swhatbuf_r+0x12>
 8003dd6:	9901      	ldr	r1, [sp, #4]
 8003dd8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003ddc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003de0:	4259      	negs	r1, r3
 8003de2:	4159      	adcs	r1, r3
 8003de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003de8:	e7eb      	b.n	8003dc2 <__swhatbuf_r+0x22>

08003dea <__smakebuf_r>:
 8003dea:	898b      	ldrh	r3, [r1, #12]
 8003dec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003dee:	079d      	lsls	r5, r3, #30
 8003df0:	4606      	mov	r6, r0
 8003df2:	460c      	mov	r4, r1
 8003df4:	d507      	bpl.n	8003e06 <__smakebuf_r+0x1c>
 8003df6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003dfa:	6023      	str	r3, [r4, #0]
 8003dfc:	6123      	str	r3, [r4, #16]
 8003dfe:	2301      	movs	r3, #1
 8003e00:	6163      	str	r3, [r4, #20]
 8003e02:	b002      	add	sp, #8
 8003e04:	bd70      	pop	{r4, r5, r6, pc}
 8003e06:	466a      	mov	r2, sp
 8003e08:	ab01      	add	r3, sp, #4
 8003e0a:	f7ff ffc9 	bl	8003da0 <__swhatbuf_r>
 8003e0e:	9900      	ldr	r1, [sp, #0]
 8003e10:	4605      	mov	r5, r0
 8003e12:	4630      	mov	r0, r6
 8003e14:	f7ff fbb8 	bl	8003588 <_malloc_r>
 8003e18:	b948      	cbnz	r0, 8003e2e <__smakebuf_r+0x44>
 8003e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e1e:	059a      	lsls	r2, r3, #22
 8003e20:	d4ef      	bmi.n	8003e02 <__smakebuf_r+0x18>
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	f043 0302 	orr.w	r3, r3, #2
 8003e2a:	81a3      	strh	r3, [r4, #12]
 8003e2c:	e7e3      	b.n	8003df6 <__smakebuf_r+0xc>
 8003e2e:	89a3      	ldrh	r3, [r4, #12]
 8003e30:	6020      	str	r0, [r4, #0]
 8003e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e36:	81a3      	strh	r3, [r4, #12]
 8003e38:	9b00      	ldr	r3, [sp, #0]
 8003e3a:	6120      	str	r0, [r4, #16]
 8003e3c:	6163      	str	r3, [r4, #20]
 8003e3e:	9b01      	ldr	r3, [sp, #4]
 8003e40:	b15b      	cbz	r3, 8003e5a <__smakebuf_r+0x70>
 8003e42:	4630      	mov	r0, r6
 8003e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e48:	f000 f81e 	bl	8003e88 <_isatty_r>
 8003e4c:	b128      	cbz	r0, 8003e5a <__smakebuf_r+0x70>
 8003e4e:	89a3      	ldrh	r3, [r4, #12]
 8003e50:	f023 0303 	bic.w	r3, r3, #3
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	81a3      	strh	r3, [r4, #12]
 8003e5a:	89a3      	ldrh	r3, [r4, #12]
 8003e5c:	431d      	orrs	r5, r3
 8003e5e:	81a5      	strh	r5, [r4, #12]
 8003e60:	e7cf      	b.n	8003e02 <__smakebuf_r+0x18>
	...

08003e64 <_fstat_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	2300      	movs	r3, #0
 8003e68:	4d06      	ldr	r5, [pc, #24]	; (8003e84 <_fstat_r+0x20>)
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	4608      	mov	r0, r1
 8003e6e:	4611      	mov	r1, r2
 8003e70:	602b      	str	r3, [r5, #0]
 8003e72:	f7fc fd99 	bl	80009a8 <_fstat>
 8003e76:	1c43      	adds	r3, r0, #1
 8003e78:	d102      	bne.n	8003e80 <_fstat_r+0x1c>
 8003e7a:	682b      	ldr	r3, [r5, #0]
 8003e7c:	b103      	cbz	r3, 8003e80 <_fstat_r+0x1c>
 8003e7e:	6023      	str	r3, [r4, #0]
 8003e80:	bd38      	pop	{r3, r4, r5, pc}
 8003e82:	bf00      	nop
 8003e84:	200002cc 	.word	0x200002cc

08003e88 <_isatty_r>:
 8003e88:	b538      	push	{r3, r4, r5, lr}
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	4d05      	ldr	r5, [pc, #20]	; (8003ea4 <_isatty_r+0x1c>)
 8003e8e:	4604      	mov	r4, r0
 8003e90:	4608      	mov	r0, r1
 8003e92:	602b      	str	r3, [r5, #0]
 8003e94:	f7fc fd97 	bl	80009c6 <_isatty>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d102      	bne.n	8003ea2 <_isatty_r+0x1a>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	b103      	cbz	r3, 8003ea2 <_isatty_r+0x1a>
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	200002cc 	.word	0x200002cc

08003ea8 <_sbrk_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	2300      	movs	r3, #0
 8003eac:	4d05      	ldr	r5, [pc, #20]	; (8003ec4 <_sbrk_r+0x1c>)
 8003eae:	4604      	mov	r4, r0
 8003eb0:	4608      	mov	r0, r1
 8003eb2:	602b      	str	r3, [r5, #0]
 8003eb4:	f7fc fd9e 	bl	80009f4 <_sbrk>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d102      	bne.n	8003ec2 <_sbrk_r+0x1a>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	b103      	cbz	r3, 8003ec2 <_sbrk_r+0x1a>
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
 8003ec4:	200002cc 	.word	0x200002cc

08003ec8 <memchr>:
 8003ec8:	4603      	mov	r3, r0
 8003eca:	b510      	push	{r4, lr}
 8003ecc:	b2c9      	uxtb	r1, r1
 8003ece:	4402      	add	r2, r0
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	d101      	bne.n	8003eda <memchr+0x12>
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	e003      	b.n	8003ee2 <memchr+0x1a>
 8003eda:	7804      	ldrb	r4, [r0, #0]
 8003edc:	3301      	adds	r3, #1
 8003ede:	428c      	cmp	r4, r1
 8003ee0:	d1f6      	bne.n	8003ed0 <memchr+0x8>
 8003ee2:	bd10      	pop	{r4, pc}

08003ee4 <_init>:
 8003ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee6:	bf00      	nop
 8003ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eea:	bc08      	pop	{r3}
 8003eec:	469e      	mov	lr, r3
 8003eee:	4770      	bx	lr

08003ef0 <_fini>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	bf00      	nop
 8003ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef6:	bc08      	pop	{r3}
 8003ef8:	469e      	mov	lr, r3
 8003efa:	4770      	bx	lr
